
> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:586:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:892:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1063:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1068:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1043:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:597:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:600:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse3) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "super bien!"
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:603:15)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:621:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:892:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:632:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:635:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse5) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "hereAnother"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "tags"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "boolean",
            "path": [
              "another"
            ],
            "message": "Expected string, received boolean"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "exampleCategory"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example2Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example3Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example4Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "somethingElseNested"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "department"
            ],
            "message": "Expected string, received object"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:638:15)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:662:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:902:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:892:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:902:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:892:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:902:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:892:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:897:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:673:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:676:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse6) is :[{
      "success": true,
      "data": [
        {
          "first": [
            "I am in the [first]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "second": [
            "I am in the [second]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "third": [
            "I am in the [third]",
            "I am an example of a tuple as defined by zod"
          ]
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:679:15)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:697:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:902:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:892:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:902:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:892:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:902:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:892:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:897:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1043:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1068:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:707:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:710:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse7) is :[{
      "success": true,
      "data": [
        {
          "first": [
            "I am in the [first]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "second": [
            "I am in the [second]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "third": [
            "I am in the [third]",
            "I am an example of a tuple as defined by zod"
          ]
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:713:15)

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:735:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean().nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:978:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1043:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1068:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:746:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:749:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse8) is :[{
      "success": true,
      "data": false
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:752:15)

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:774:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish()).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish())",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.boolean().nullish())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullish]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:978:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1048:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:902:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1043:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1068:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:785:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:788:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse9) is :[{
      "success": true,
      "data": [
        true,
        false,
        true
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:791:15)

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:813:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:892:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1063:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1068:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:824:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:827:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse2) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "vraiment super bien!"
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:830:15)

  console.log
     >>>>>>> zodSchemaAsText1 : [z
      .object({
        voila: z.string(),
      })
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:852:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:756:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:770:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:782:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:785:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:789:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:973:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:892:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1068:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:862:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:865:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse1) is :[{
      "success": true
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:868:15)

FAIL tests/parser/ZodSchemaParser.test.ts (12.479 s)
  Testing - ZodSchemaParser experiment() method
    [zodSchemaAsText3] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1834 ms)
    [zodSchemaAsText5] - Test the betterExperiment() method reifies a zod schema
      × which successfully pass the zod parse test  (1641 ms)
    [zodSchemaAsText6] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1505 ms)
    [zodSchemaAsText7] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1308 ms)
    [zodSchemaAsText8] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (960 ms)
    [zodSchemaAsText9] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1167 ms)
    [zodSchemaAsText2] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1162 ms)
    [zodSchemaAsText1] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1105 ms)

  ● Testing - ZodSchemaParser experiment() method › [zodSchemaAsText5] - Test the betterExperiment() method reifies a zod schema › which successfully pass the zod parse test 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 641 |[39m       [90m// expect(`${(typeof reifiedZodSchema)}`).toEqual(`${(typeof zodSchemaInstance5)}`)[39m
     [90m 642 |[39m       expect(zodSchemaInstance5[33m.[39msafeParse(testTsObjectToParse5)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)
    [31m[1m>[22m[39m[90m 643 |[39m       expect(reifiedZodSchema[33m.[39msafeParse(testTsObjectToParse5)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                                                        [31m[1m^[22m[39m
     [90m 644 |[39m
     [90m 645 |[39m       [90m/**[39m
     [90m 646 |[39m [90m       * below, an example zod-matter test[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:643:72)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 7 passed, 8 total
Snapshots:   0 total
Time:        12.582 s, estimated 14 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.
