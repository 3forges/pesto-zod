
> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:585:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1069:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1049:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:594:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:597:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse3) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "super bien!"
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:600:15)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:618:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "hereAnother",
        "z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[36]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [reseau: z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "reseau",
        "z.object({ cesar: z.array(z.string()), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cesar:z.array(z.string()),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[reseau] = this.betterExperiment(z.object({ cesar: z.array(z.string()), }))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ cesar: z.array(z.string()), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cesar",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cesar] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "imLackingIdea",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[imLackingIdea] = this.betterExperiment(z.boolean().optional())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:984:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "itsForATest",
        "z.boolean()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[itsForATest] = this.betterExperiment(z.boolean())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:984:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "tags",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "another",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.boolean().nullish())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullish]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:984:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1054:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "exampleCategory",
        "z.array(z.array(z.string().nullable())).optional()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.array(z.array(z.string().nullable())).optional())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.array(z.string().nullable())).optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.array(z.string().nullable()))",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.array(z.string().nullable())"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string().nullable())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string().nullable()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1049:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example2Category",
        "z.nullable(z.array(z.boolean())).optional()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.nullable(z.array(z.boolean())).optional())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable(z.array(z.boolean())).optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.nullable(z.array(z.boolean()))",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[11]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable",
        "z.array(z.boolean())"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:984:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:888:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example3Category",
        "z.optional(z.number()).array()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.optional(z.number()).array())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number()).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional(z.number()).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.optional(z.number())",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.optional(z.number())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional",
        "z.number()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[number]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:989:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:913:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1069:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example4Category",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.array(z.number()).optional())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[number]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:989:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "image",
        "z.string().optional()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string().optional())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "somethingElseNested",
        "z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[59]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "firstname",
        "z.string().array()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[firstname] = this.betterExperiment(z.string().array())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string().array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1069:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "lastname",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[lastname] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "color",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[color] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "two",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[two] = this.betterExperiment(z.boolean().optional())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:984:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "three",
        "z.number().array().optional()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[three] = this.betterExperiment(z.number().array().optional())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.number().array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number().array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.number().array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.number().array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number()",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.number()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[number]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:989:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1069:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "four",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[four] = this.betterExperiment(z.array(z.number()).optional())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[number]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:989:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "department",
        "z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[23]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "divisionName",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[divisionName] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "secrecyTags",
        "z.array(z.string()).optional()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[secrecyTags] = this.betterExperiment(z.array(z.string()).optional())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string()).optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.string()).optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.string())",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:629:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:632:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse5) is :[{
      "success": true,
      "data": {
        "title": "HiDeoo",
        "hereAnother": {
          "reseau": {
            "cesar": [
              "marc",
              "aurèle",
              "auguste"
            ]
          },
          "imLackingIdea": true,
          "itsForATest": false
        },
        "tags": [
          "william",
          "the",
          "conquerer"
        ],
        "another": true,
        "exampleCategory": [
          [
            "joe",
            "alfred",
            "alvin"
          ],
          [
            "thirteen",
            "hundred",
            "books"
          ],
          [
            "going",
            "overseas",
            "together"
          ]
        ],
        "example2Category": [
          false,
          true,
          false
        ],
        "example3Category": [
          7684464125145,
          26454943684684,
          1516546884648
        ],
        "example4Category": [
          7684464125145,
          26454943684684,
          1516546884648
        ],
        "image": "https://fastly.picsum.photos/id/6/200/200.jpg?hmac=g4Q9Vcu5Ohm8Rwap3b6HSIxUfIALZ6BasESHhw7VjLE",
        "somethingElseNested": {
          "firstname": [
            "Jean-Baptiste",
            "Marie",
            "Éric"
          ],
          "lastname": "Lasselle",
          "color": "yellow",
          "two": false,
          "three": [
            56,
            789,
            159
          ],
          "four": [
            15,
            46,
            739
          ]
        },
        "department": {
          "divisionName": "CCOE",
          "secrecyTags": [
            "LEVEL3",
            "NOCOPY"
          ]
        }
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:635:15)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:659:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:903:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:668:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:671:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse6) is :[{
      "success": true,
      "data": [
        {
          "first": [
            "I am in the [first]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "second": [
            "I am in the [second]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "third": [
            "I am in the [third]",
            "I am an example of a tuple as defined by zod"
          ]
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:674:15)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:692:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:702:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:716:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:721:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:727:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:903:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1049:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:700:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:703:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse7) is :[{
      "success": true,
      "data": [
        {
          "first": [
            "I am in the [first]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "second": [
            "I am in the [second]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "third": [
            "I am in the [third]",
            "I am an example of a tuple as defined by zod"
          ]
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:706:15)

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:726:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean().nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:984:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1049:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:735:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:738:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse8) is :[{
      "success": true,
      "data": false
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:741:15)

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:763:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish()).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish())",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.boolean().nullish())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullish]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:984:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1054:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:908:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1049:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:773:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:776:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse9) is :[{
      "success": true,
      "data": [
        true,
        false,
        true
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:779:15)

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:801:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1069:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:811:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:814:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse2) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "vraiment super bien!"
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:817:15)

  console.log
     >>>>>>> zodSchemaAsText1 : [z
      .object({
        voila: z.string(),
      })
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:838:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:761:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:775:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:794:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:979:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:898:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1074:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:847:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:850:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse1) is :[{
      "success": true
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:853:15)

PASS tests/parser/ZodSchemaParser.test.ts (13.558 s)
  Testing - ZodSchemaParser experiment() method
    [zodSchemaAsText3] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1909 ms)
    [zodSchemaAsText5] - Test the betterExperiment() method reifies a zod schema
      √ which successfully pass the zod parse test  (2066 ms)
    [zodSchemaAsText6] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1238 ms)
    [zodSchemaAsText7] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1486 ms)
    [zodSchemaAsText8] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1032 ms)
    [zodSchemaAsText9] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1317 ms)
    [zodSchemaAsText2] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1087 ms)
    [zodSchemaAsText1] - Test the betterExperiment() method properly find the top function call in the zod schema
      √ which successfully pass the zod parse test  (1047 ms)

Test Suites: 1 passed, 1 total
Tests:       8 passed, 8 total
Snapshots:   0 total
Time:        13.659 s
Ran all test suites.
