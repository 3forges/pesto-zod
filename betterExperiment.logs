
> @pesto-io/zod-reify@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> TEST CASE [Test #1: zodSchema1] - testCase.zodSchemaAsText=[z
      .object({
        voila: z.string(),
      })
      .optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).optional()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), }).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ voila: z.string(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #1bis: zodSchema1] - testCase.zodSchemaAsText=[z
      .object({
        voila: z.string(),
      })
      .optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).optional()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), }).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ voila: z.string(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "object",
            "received": "null",
            "path": [],
            "message": "Expected object, received null"
          }
        ],
        "name": "ZodError"
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #2: zodSchema2] - testCase.zodSchemaAsText=[z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), }).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ voila: z.string(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "vraiment super bien!"
        }
      ]
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #3: zodSchema3] - testCase.zodSchemaAsText=[z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), }).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ voila: z.string(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "super bien!"
        }
      ]
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #4: zodSchema4] - testCase.zodSchemaAsText=[z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })
      .optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })
      .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }).optional()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }).optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[231]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "hereAnother",
        "z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.reify(z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[36]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [reseau: z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "reseau",
        "z.object({ cesar: z.array(z.string()), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cesar:z.array(z.string()),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[reseau] = this.reify(z.object({ cesar: z.array(z.string()), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ cesar: z.array(z.string()), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ cesar: z.array(z.string()), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cesar",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cesar] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "imLackingIdea",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[imLackingIdea] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "itsForATest",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[itsForATest] = this.reify(z.boolean())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "tags",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "another",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.reify(z.boolean().nullish())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullish]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1009:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "exampleCategory",
        "z.array(z.array(z.string().nullable())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.reify(z.array(z.array(z.string().nullable())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.array(z.string().nullable())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.array(z.string().nullable()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.array(z.string().nullable())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string().nullable()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example2Category",
        "z.nullable(z.array(z.boolean())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.reify(z.nullable(z.array(z.boolean())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable(z.array(z.boolean())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.nullable(z.array(z.boolean()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[11]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable",
        "z.array(z.boolean())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:773:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example3Category",
        "z.optional(z.number()).array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.reify(z.optional(z.number()).array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional(z.number()).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.optional(z.number())",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:808:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example4Category",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "image",
        "z.string().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.reify(z.string().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "somethingElseNested",
        "z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.reify(z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[59]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "firstname",
        "z.string().array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[firstname] = this.reify(z.string().array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "lastname",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[lastname] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "color",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[color] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "two",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[two] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "three",
        "z.number().array().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[three] = this.reify(z.number().array().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number().array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "four",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[four] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "department",
        "z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.reify(z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[23]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "divisionName",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[divisionName] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "secrecyTags",
        "z.array(z.string()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[secrecyTags] = this.reify(z.array(z.string()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.string()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.string())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": {
        "title": "HiDeoo",
        "hereAnother": {
          "reseau": {
            "cesar": [
              "marc",
              "aurèle",
              "auguste"
            ]
          },
          "imLackingIdea": true,
          "itsForATest": false
        },
        "tags": [
          "william",
          "the",
          "conquerer"
        ],
        "another": true,
        "exampleCategory": [
          [
            "joe",
            "alfred",
            "alvin"
          ],
          [
            "thirteen",
            "hundred",
            "books"
          ],
          [
            "going",
            "overseas",
            "together"
          ]
        ],
        "example2Category": [
          false,
          true,
          false
        ],
        "example3Category": [
          7684464125145,
          26454943684684,
          1516546884648
        ],
        "example4Category": [
          7684464125145,
          26454943684684,
          1516546884648
        ],
        "image": "./images/paysages/puydedome.png",
        "somethingElseNested": {
          "firstname": [
            "Jean-Baptiste",
            "Marie",
            "Éric"
          ],
          "lastname": "Lasselle",
          "color": "yellow",
          "two": false,
          "three": [
            56,
            789,
            159
          ],
          "four": [
            15,
            46,
            739
          ]
        },
        "department": {
          "divisionName": "CCOE",
          "secrecyTags": [
            "LEVEL3",
            "NOCOPY"
          ]
        }
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #5: zodSchema5] - testCase.zodSchemaAsText=[z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "hereAnother",
        "z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.reify(z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[36]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [reseau: z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "reseau",
        "z.object({ cesar: z.array(z.string()), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cesar:z.array(z.string()),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[reseau] = this.reify(z.object({ cesar: z.array(z.string()), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ cesar: z.array(z.string()), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ cesar: z.array(z.string()), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cesar",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cesar] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "imLackingIdea",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[imLackingIdea] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "itsForATest",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[itsForATest] = this.reify(z.boolean())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "tags",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "another",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.reify(z.boolean().nullish())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullish]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1009:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "exampleCategory",
        "z.array(z.array(z.string().nullable())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.reify(z.array(z.array(z.string().nullable())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.array(z.string().nullable())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.array(z.string().nullable()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.array(z.string().nullable())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string().nullable()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example2Category",
        "z.nullable(z.array(z.boolean())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.reify(z.nullable(z.array(z.boolean())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable(z.array(z.boolean())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.nullable(z.array(z.boolean()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[11]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable",
        "z.array(z.boolean())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:773:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example3Category",
        "z.optional(z.number()).array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.reify(z.optional(z.number()).array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional(z.number()).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.optional(z.number())",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:808:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example4Category",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "image",
        "z.string().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.reify(z.string().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "somethingElseNested",
        "z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.reify(z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[59]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "firstname",
        "z.string().array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[firstname] = this.reify(z.string().array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "lastname",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[lastname] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "color",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[color] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "two",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[two] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "three",
        "z.number().array().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[three] = this.reify(z.number().array().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number().array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "four",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[four] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "department",
        "z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.reify(z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[23]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "divisionName",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[divisionName] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "secrecyTags",
        "z.array(z.string()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[secrecyTags] = this.reify(z.array(z.string()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.string()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.string())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": {
        "title": "HiDeoo",
        "hereAnother": {
          "reseau": {
            "cesar": [
              "marc",
              "aurèle",
              "auguste"
            ]
          },
          "imLackingIdea": true,
          "itsForATest": false
        },
        "tags": [
          "william",
          "the",
          "conquerer"
        ],
        "another": true,
        "exampleCategory": [
          [
            "joe",
            "alfred",
            "alvin"
          ],
          [
            "thirteen",
            "hundred",
            "books"
          ],
          [
            "going",
            "overseas",
            "together"
          ]
        ],
        "example2Category": [
          false,
          true,
          false
        ],
        "example3Category": [
          7684464125145,
          26454943684684,
          1516546884648
        ],
        "example4Category": [
          7684464125145,
          26454943684684,
          1516546884648
        ],
        "image": "./images/paysages/puydedome.png",
        "somethingElseNested": {
          "firstname": [
            "Jean-Baptiste",
            "Marie",
            "Éric"
          ],
          "lastname": "Lasselle",
          "color": "yellow",
          "two": false,
          "three": [
            56,
            789,
            159
          ],
          "four": [
            15,
            46,
            739
          ]
        },
        "department": {
          "divisionName": "CCOE",
          "secrecyTags": [
            "LEVEL3",
            "NOCOPY"
          ]
        }
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #6: zodSchema6] - testCase.zodSchemaAsText=[z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[tuple]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ArrayLiteralExpression] - processedNode is [[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:508:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:527:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:536:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ first: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:548:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:508:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:527:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:536:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ second: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:548:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:508:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:527:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:536:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ third: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:548:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:794:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": [
        {
          "first": [
            "I am in the [first]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "second": [
            "I am in the [second]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "third": [
            "I am in the [third]",
            "I am an example of a tuple as defined by zod"
          ]
        }
      ]
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #7: zodSchema7] - testCase.zodSchemaAsText=[z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[tuple]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ArrayLiteralExpression] - processedNode is [[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:508:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:527:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:536:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ first: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:548:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:508:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:527:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:536:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ second: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:548:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:508:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:527:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:536:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ third: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:548:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:794:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": [
        {
          "first": [
            "I am in the [first]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "second": [
            "I am in the [second]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "third": [
            "I am in the [third]",
            "I am an example of a tuple as defined by zod"
          ]
        }
      ]
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #8: zodSchema8] - testCase.zodSchemaAsText=[z.boolean().nullable().optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.boolean().nullable().optional()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.boolean().nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean().nullable()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": false
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #9: zodSchema9] - testCase.zodSchemaAsText=[z.array(z.boolean().nullish()).nullable().optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.array(z.boolean().nullish()).nullable().optional()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean().nullish()).nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish()).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish())",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.boolean().nullish())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean().nullish())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullish]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1009:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": [
        true,
        false,
        true
      ]
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #10: zodSchema10] - testCase.zodSchemaAsText=[z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[61]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[58]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[strict]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })",
        "strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "un",
        "z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [un]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({deux:z.object({trois:z.object({quatre:z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),}),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[un] = this.reify(z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[45]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "deux",
        "z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [deux]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({trois:z.object({quatre:z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[deux] = this.reify(z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[38]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "trois",
        "z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [trois]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({quatre:z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[trois] = this.reify(z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[31]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "quatre",
        "z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [quatre]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[quatre] = this.reify(z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[24]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cinq: z.object({ six: z.object({ sept: z.string(), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cinq",
        "z.object({ six: z.object({ sept: z.string(), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cinq]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({six:z.object({sept:z.string(),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cinq] = this.reify(z.object({ six: z.object({ sept: z.string(), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ six: z.object({ sept: z.string(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ six: z.object({ sept: z.string(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ six: z.object({ sept: z.string(), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ six: z.object({ sept: z.string(), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [six: z.object({ sept: z.string(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "six",
        "z.object({ sept: z.string(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [six]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({sept:z.string(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[six] = this.reify(z.object({ sept: z.string(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ sept: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ sept: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ sept: z.string(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ sept: z.string(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [sept: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "sept",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [sept]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[sept] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [strict]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1058:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": {
        "un": {
          "deux": {
            "trois": {
              "quatre": {
                "cinq": {
                  "six": {
                    "sept": "Excellent!"
                  }
                }
              }
            }
          }
        }
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #10bis: zodSchema10] - testCase.zodSchemaAsText=[z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[61]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[58]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[strict]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })",
        "strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "un",
        "z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [un]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({deux:z.object({trois:z.object({quatre:z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),}),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[un] = this.reify(z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[45]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "deux",
        "z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [deux]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({trois:z.object({quatre:z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[deux] = this.reify(z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[38]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "trois",
        "z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [trois]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({quatre:z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[trois] = this.reify(z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[31]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "quatre",
        "z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [quatre]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[quatre] = this.reify(z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[24]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cinq: z.object({ six: z.object({ sept: z.string(), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cinq",
        "z.object({ six: z.object({ sept: z.string(), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cinq]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({six:z.object({sept:z.string(),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cinq] = this.reify(z.object({ six: z.object({ sept: z.string(), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ six: z.object({ sept: z.string(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ six: z.object({ sept: z.string(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ six: z.object({ sept: z.string(), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ six: z.object({ sept: z.string(), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [six: z.object({ sept: z.string(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "six",
        "z.object({ sept: z.string(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [six]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({sept:z.string(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[six] = this.reify(z.object({ sept: z.string(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ sept: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ sept: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ sept: z.string(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ sept: z.string(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [sept: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "sept",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [sept]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[sept] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [strict]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1058:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": null
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #10ter: zodSchema10] - testCase.zodSchemaAsText=[z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        un: z.object({
          deux: z.object({
            trois: z.object({
              quatre: z.object({
                cinq: z.object({
                  six: z.object({
                    sept: z.string(),
                  }),
                }),
              }),
            }),
          }),
        })
      })
      .strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[61]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[58]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }).strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[strict]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })",
        "strict"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [un: z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "un",
        "z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [un]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({deux:z.object({trois:z.object({quatre:z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),}),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[un] = this.reify(z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[45]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [deux: z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "deux",
        "z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [deux]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({trois:z.object({quatre:z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[deux] = this.reify(z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[38]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [trois: z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "trois",
        "z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [trois]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({quatre:z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[trois] = this.reify(z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[31]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [quatre: z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "quatre",
        "z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [quatre]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cinq:z.object({six:z.object({sept:z.string(),}),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[quatre] = this.reify(z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ cinq: z.object({ six: z.object({ sept: z.string(), }), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[24]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ cinq: z.object({ six: z.object({ sept: z.string(), }), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cinq: z.object({ six: z.object({ sept: z.string(), }), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cinq",
        "z.object({ six: z.object({ sept: z.string(), }), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cinq]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({six:z.object({sept:z.string(),}),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cinq] = this.reify(z.object({ six: z.object({ sept: z.string(), }), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ six: z.object({ sept: z.string(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ six: z.object({ sept: z.string(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ six: z.object({ sept: z.string(), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ six: z.object({ sept: z.string(), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [six: z.object({ sept: z.string(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "six",
        "z.object({ sept: z.string(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [six]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({sept:z.string(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[six] = this.reify(z.object({ sept: z.string(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ sept: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ sept: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ sept: z.string(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ sept: z.string(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [sept: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "sept",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [sept]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[sept] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [strict]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1058:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #11: zodSchema11, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:939:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00Z"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #11bis: zodSchema11, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:939:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123Z"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #11ter: zodSchema11, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:939:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123456Z"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #11quarte: zodSchema11, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime()]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:939:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_string",
            "validation": "datetime",
            "message": "Invalid datetime",
            "path": []
          }
        ],
        "name": "ZodError"
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #12: zodSchema12, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ offset: true });]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ offset: true });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ offset: true })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ offset: true })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ offset: true }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ offset: true }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [offset: true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "offset",
        "true"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [offset]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[offset] = this.reify(true)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [TrueKeyword] - processedNode is [true]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:710:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00+02:00"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #12bis: zodSchema12, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ offset: true });]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ offset: true });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ offset: true })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ offset: true })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ offset: true }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ offset: true }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [offset: true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "offset",
        "true"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [offset]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[offset] = this.reify(true)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [TrueKeyword] - processedNode is [true]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:710:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123+02:00"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #12ter: zodSchema12, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ offset: true });]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ offset: true });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ offset: true })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ offset: true })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ offset: true }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ offset: true }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [offset: true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "offset",
        "true"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [offset]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[offset] = this.reify(true)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [TrueKeyword] - processedNode is [true]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:710:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123+0200"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #12quarte: zodSchema12, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ offset: true });]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ offset: true });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ offset: true })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ offset: true })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ offset: true })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ offset: true }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ offset: true }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [offset: true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "offset",
        "true"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [offset]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [true]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[offset] = this.reify(true)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [TrueKeyword] - processedNode is [true]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:710:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123+02"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #13: zodSchema13, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ precision: 3 });]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ precision: 3 });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ precision: 3 })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ precision: 3 })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ precision: 3 }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ precision: 3 }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [precision: 3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "precision",
        "3"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [precision]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[precision] = this.reify(3)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [NumericLiteral] - processedNode is [3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:710:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": true,
      "data": "2020-01-01T00:00:00.123Z"
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #13bis: zodSchema13, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ precision: 3 });]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ precision: 3 });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ precision: 3 })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ precision: 3 })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ precision: 3 }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ precision: 3 }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [precision: 3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "precision",
        "3"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [precision]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[precision] = this.reify(3)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [NumericLiteral] - processedNode is [3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:710:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_string",
            "validation": "datetime",
            "message": "Invalid datetime",
            "path": []
          }
        ],
        "name": "ZodError"
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #13ter: zodSchema13, https://zod.dev/?id=datetimes] - testCase.zodSchemaAsText=[z.string().datetime({ precision: 3 });]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ precision: 3 });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ precision: 3 })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ precision: 3 })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ precision: 3 }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ precision: 3 }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [precision: 3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "precision",
        "3"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [precision]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[precision] = this.reify(3)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [NumericLiteral] - processedNode is [3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:710:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_string",
            "validation": "datetime",
            "message": "Invalid datetime",
            "path": []
          }
        ],
        "name": "ZodError"
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #13: zodSchema14, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the "not" operator).] - testCase.zodSchemaAsText=[z.string().datetime({ precision: 3 });]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ precision: 3 });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ precision: 3 })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ precision: 3 })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ precision: 3 }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ precision: 3 }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [precision: 3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "precision",
        "3"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [precision]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[precision] = this.reify(3)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [NumericLiteral] - processedNode is [3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:710:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_string",
            "validation": "datetime",
            "message": "Invalid datetime",
            "path": []
          }
        ],
        "name": "ZodError"
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #13: testCase14bis, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using both an unary, and a binary operator (the "not" operator).] - testCase.zodSchemaAsText=[z.string().datetime({ precision: 3 });]

      at tests/reify/ZodSchemaReifier.test.ts:1641:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.string().datetime({ precision: 3 });

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.string().datetime({ precision: 3 })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.string().datetime({ precision: 3 })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().datetime({ precision: 3 })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().datetime",
        "{ precision: 3 }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[datetime]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "datetime"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ precision: 3 }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [precision: 3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "precision",
        "3"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [precision]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [3]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[precision] = this.reify(3)

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [NumericLiteral] - processedNode is [3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [datetime]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:710:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1650:15

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1651:15

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testCase.testTsObjectToValidate) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_string",
            "validation": "datetime",
            "message": "Invalid datetime",
            "path": []
          }
        ],
        "name": "ZodError"
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1654:15

  console.log
     >>>>>>> TEST CASE [Test #3: markdown frontmatter extraction zodSchema3] - testCase.zodSchemaAsText=[z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at tests/reify/ZodSchemaReifier.test.ts:1692:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), }).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ voila: z.string(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1703:13

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1706:14

  console.log
     >>>>>>> testCase.testMarkdown is :[---
    
    - voila: oh que oui
    - voila: ça marche vraiment!
    ---
    
    # Hello Pesto ZodSchemaReifier!
    ]

      at tests/reify/ZodSchemaReifier.test.ts:1709:14

  console.log
     >>>>>>> testCase.expectedFrontmatter is :[[
      {
        "voila": "oh que oui"
      },
      {
        "voila": "ça marche vraiment!"
      }
    ]]

      at tests/reify/ZodSchemaReifier.test.ts:1712:14

  console.log
     >>>>>>> zod-matter extracted fronmatter is :[[
      {
        "voila": "oh que oui"
      },
      {
        "voila": "ça marche vraiment!"
      }
    ]]

      at tests/reify/ZodSchemaReifier.test.ts:1720:16

  console.log
     >>>>>>> expected frontmatter is :[[
      {
        "voila": "oh que oui"
      },
      {
        "voila": "ça marche vraiment!"
      }
    ]]

      at tests/reify/ZodSchemaReifier.test.ts:1723:16

  console.log
     >>>>>>> TEST CASE [Test #4: markdown frontmatter extraction zodSchema4] - testCase.zodSchemaAsText=[z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })
      .optional()]

      at tests/reify/ZodSchemaReifier.test.ts:1692:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })
      .optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }).optional()]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }).optional()

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[231]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "hereAnother",
        "z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.reify(z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[36]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [reseau: z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "reseau",
        "z.object({ cesar: z.array(z.string()), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cesar:z.array(z.string()),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[reseau] = this.reify(z.object({ cesar: z.array(z.string()), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ cesar: z.array(z.string()), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ cesar: z.array(z.string()), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cesar",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cesar] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "imLackingIdea",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[imLackingIdea] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "itsForATest",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[itsForATest] = this.reify(z.boolean())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "tags",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "another",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.reify(z.boolean().nullish())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullish]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1009:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "exampleCategory",
        "z.array(z.array(z.string().nullable())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.reify(z.array(z.array(z.string().nullable())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.array(z.string().nullable())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.array(z.string().nullable()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.array(z.string().nullable())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string().nullable()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example2Category",
        "z.nullable(z.array(z.boolean())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.reify(z.nullable(z.array(z.boolean())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable(z.array(z.boolean())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.nullable(z.array(z.boolean()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[11]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable",
        "z.array(z.boolean())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:773:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example3Category",
        "z.optional(z.number()).array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.reify(z.optional(z.number()).array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional(z.number()).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.optional(z.number())",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:808:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example4Category",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "image",
        "z.string().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.reify(z.string().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "somethingElseNested",
        "z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.reify(z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[59]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "firstname",
        "z.string().array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[firstname] = this.reify(z.string().array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "lastname",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[lastname] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "color",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[color] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "two",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[two] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "three",
        "z.number().array().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[three] = this.reify(z.number().array().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number().array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "four",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[four] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "department",
        "z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.reify(z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[23]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "divisionName",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[divisionName] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "secrecyTags",
        "z.array(z.string()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[secrecyTags] = this.reify(z.array(z.string()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.string()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.string())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1703:13

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1706:14

  console.log
     >>>>>>> testCase.testMarkdown is :[---
    
    title: HiDeoo
    
    hereAnother: 
    
      reseau: 
    
        cesar: 
    
          - marc
    
          - aurèle
    
          - auguste
    
      imLackingIdea: true
    
      itsForATest: false
    
    tags: 
    
      - william
    
      - the
    
      - conquerer
    
    another: true
    
    exampleCategory:
    
      - - joe
    
        - alfred
    
        - alvin
    
      - - thirteen
    
        - hundred
    
        - books
    
      - - going
    
        - overseas
    
        - together
    
    example2Category: 
    
      - false
    
      - true
    
      - false
    
    example3Category: 
    
      - 7684464125145
    
      - 26454943684684
    
      - 1516546884648
    
    example4Category: 
    
      - 7684464125145
    
      - 26454943684684
    
      - 1516546884648
    
    image: "./images/paysages/puydedome.png"
    
    somethingElseNested:
    
      firstname: 
    
        - Jean-Baptiste
    
        - Marie
    
        - Éric
    
      lastname: Lasselle
    
      color: yellow
    
      two: false
    
      three: 
    
        - 56
    
        - 789
    
        - 159
    
      four: 
    
        - 15
    
        - 46
    
        - 739
    
      example1Categories: 
    
        - design
    
        - terraform
    
        - plugin
    
      example2Categories: 
    
        first:
    
          - joe
    
          - alfred
    
          - alvin
    
        second:
    
          - thirteen
    
          - hundred
    
          - books
    
        third:
    
          - going
    
          - overseas
    
          - together
    
    department: 
    
      divisionName: CCOE
    
      secrecyTags: 
        - LEVEL3
     
        - NOCOPY
    
    ---
    
    # Hello Pesto ZodSchemaReifier!
    ]

      at tests/reify/ZodSchemaReifier.test.ts:1709:14

  console.log
     >>>>>>> testCase.expectedFrontmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1712:14

  console.log
     >>>>>>> zod-matter extracted fronmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1720:16

  console.log
     >>>>>>> expected frontmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1723:16

  console.log
     >>>>>>> TEST CASE [Test #5: markdown frontmatter extraction zodSchema5] - testCase.zodSchemaAsText=[z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at tests/reify/ZodSchemaReifier.test.ts:1692:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "hereAnother",
        "z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.reify(z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[36]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [reseau: z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "reseau",
        "z.object({ cesar: z.array(z.string()), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cesar:z.array(z.string()),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[reseau] = this.reify(z.object({ cesar: z.array(z.string()), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ cesar: z.array(z.string()), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ cesar: z.array(z.string()), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "cesar",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[cesar] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "imLackingIdea",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[imLackingIdea] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "itsForATest",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[itsForATest] = this.reify(z.boolean())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "tags",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "another",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.reify(z.boolean().nullish())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullish]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1009:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "exampleCategory",
        "z.array(z.array(z.string().nullable())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.reify(z.array(z.array(z.string().nullable())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[17]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.array(z.string().nullable())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.array(z.string().nullable()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.array(z.string().nullable()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.array(z.string().nullable())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string().nullable())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string().nullable()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().nullable()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1002:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example2Category",
        "z.nullable(z.array(z.boolean())).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.reify(z.nullable(z.array(z.boolean())).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable(z.array(z.boolean())).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.nullable(z.array(z.boolean()))",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.nullable(z.array(z.boolean()))]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[11]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.nullable",
        "z.array(z.boolean())"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[nullable]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "nullable"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [nullable]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:773:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example3Category",
        "z.optional(z.number()).array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.reify(z.optional(z.number()).array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number()).array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional(z.number()).array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.optional(z.number())",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.optional(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.optional",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:808:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "example4Category",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "image",
        "z.string().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.reify(z.string().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "somethingElseNested",
        "z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.reify(z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[59]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "firstname",
        "z.string().array()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[firstname] = this.reify(z.string().array())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.string()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "lastname",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[lastname] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "color",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[color] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "two",
        "z.boolean().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[two] = this.reify(z.boolean().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[boolean]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:904:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "three",
        "z.number().array().optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[three] = this.reify(z.number().array().optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array().optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array().optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number().array()",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number().array()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number().array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.number()",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1030:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "four",
        "z.array(z.number()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[four] = this.reify(z.array(z.number()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.number()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.number())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.number())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.number()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.number()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[number]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "number"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [number]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:911:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "department",
        "z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.reify(z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[23]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "divisionName",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[divisionName] = this.reify(z.string())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "secrecyTags",
        "z.array(z.string()).optional()"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[secrecyTags] = this.reify(z.array(z.string()).optional())

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string()).optional()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.string()).optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[optional]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.string())",
        "optional"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:1037:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1703:13

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1706:14

  console.log
     >>>>>>> testCase.testMarkdown is :[---
    
    title: HiDeoo
    
    hereAnother:
    
      reseau:
    
        cesar:
    
          - marc
    
          - aurèle
    
          - auguste
    
      imLackingIdea: true
    
      itsForATest: false
    
    tags: 
    
      - william
    
      - the
    
      - conquerer
    
    another: true
    
    exampleCategory:
    
      - - joe
    
        - alfred
    
        - alvin
    
      - - thirteen
    
        - hundred
    
        - books
    
      - - going
    
        - overseas
    
        - together
    
    example2Category: 
    
      - false
    
      - true
    
      - false
    
    example3Category: 
    
      - 7684464125145
    
      - 26454943684684
    
      - 1516546884648
    
    example4Category: 
    
      - 7684464125145
    
      - 26454943684684
    
      - 1516546884648
    
    image: "./images/paysages/puydedome.png"
    
    somethingElseNested:
    
      firstname: 
    
        - Jean-Baptiste
    
        - Marie
    
        - Éric
    
      lastname: Lasselle
    
      color: yellow
    
      two: false
    
      three: 
    
        - 56
    
        - 789
    
        - 159
    
      four: 
    
        - 15
    
        - 46
    
        - 739
    
      example1Categories: 
    
        - design
    
        - terraform
    
        - plugin
    
      example2Categories: 
    
        first:
    
          - joe
    
          - alfred
    
          - alvin
    
        second:
    
          - thirteen
    
          - hundred
    
          - books
    
        third:
    
          - going
    
          - overseas
    
          - together
    
    department: 
    
      divisionName: CCOE
    
      secrecyTags: 
        - LEVEL3
     
        - NOCOPY
    
    ---
    
    # Hello Pesto ZodSchemaReifier!
    ]

      at tests/reify/ZodSchemaReifier.test.ts:1709:14

  console.log
     >>>>>>> testCase.expectedFrontmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1712:14

  console.log
     >>>>>>> zod-matter extracted fronmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1720:16

  console.log
     >>>>>>> expected frontmatter is :[{
      "title": "HiDeoo",
      "hereAnother": {
        "reseau": {
          "cesar": [
            "marc",
            "aurèle",
            "auguste"
          ]
        },
        "imLackingIdea": true,
        "itsForATest": false
      },
      "tags": [
        "william",
        "the",
        "conquerer"
      ],
      "another": true,
      "exampleCategory": [
        [
          "joe",
          "alfred",
          "alvin"
        ],
        [
          "thirteen",
          "hundred",
          "books"
        ],
        [
          "going",
          "overseas",
          "together"
        ]
      ],
      "example2Category": [
        false,
        true,
        false
      ],
      "example3Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "example4Category": [
        7684464125145,
        26454943684684,
        1516546884648
      ],
      "image": "./images/paysages/puydedome.png",
      "somethingElseNested": {
        "firstname": [
          "Jean-Baptiste",
          "Marie",
          "Éric"
        ],
        "lastname": "Lasselle",
        "color": "yellow",
        "two": false,
        "three": [
          56,
          789,
          159
        ],
        "four": [
          15,
          46,
          739
        ]
      },
      "department": {
        "divisionName": "CCOE",
        "secrecyTags": [
          "LEVEL3",
          "NOCOPY"
        ]
      }
    }]

      at tests/reify/ZodSchemaReifier.test.ts:1723:16

  console.log
     >>>>>>> TEST CASE [Test #6: markdown frontmatter extraction zodSchema6] - testCase.zodSchemaAsText=[z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at tests/reify/ZodSchemaReifier.test.ts:1734:15

  console.info
    [@ZodSchemaReifier].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:213:13)

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.log
    [@ZodSchemaReifier].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/reify/ZodSchemaReifier.ts:281:17

  console.info
    [@ZodSchemaReifier].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaReifier (src/reify/ZodSchemaReifier.ts:250:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[tuple]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ArrayLiteralExpression] - processedNode is [[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:508:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:527:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:536:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ first: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:548:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:508:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:527:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:536:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ second: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:548:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:508:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:527:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:536:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[object]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [ObjectLiteralExpression] - processedNode is [{ third: z.array(z.string()) }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:584:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:603:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": []
    }]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:612:17)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:623:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:626:19)

  console.log
    [@ZodSchemaReifier].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.reify(z.array(z.string()))

      at ZodSchemaReifier.reifyObjectLiteralExpression (src/reify/ZodSchemaReifier.ts:630:19)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[2]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[array]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:373:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:381:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:391:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [CallExpression] - processedNode is [z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:323:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node children count is :[1]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:333:15)

  console.log
    [@ZodSchemaReifier].[reify()] - selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:336:15)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:355:15)

  console.log
    [@ZodSchemaReifier].[reify()] - calledFunctionName is :[string]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:405:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:413:17)

  console.log
    [@ZodSchemaReifier].[reify()] - processedNode caller is :[z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:423:17)

  console.log
    [@ZodSchemaReifier].[reify()] - START - processedNode.getKindName() : [Identifier] - processedNode is [z]

      at ZodSchemaReifier.reify (src/reify/ZodSchemaReifier.ts:319:13)

  console.log
    [@ZodSchemaReifier].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaReifier.reifyNoArgsZodFunctionCall (src/reify/ZodSchemaReifier.ts:897:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:801:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:787:17)

  console.log
    [@ZodSchemaReifier].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaReifier.reifyArrayLiteralExpression (src/reify/ZodSchemaReifier.ts:548:17)

  console.log
    [@ZodSchemaReifier].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaReifier.reifyZodFunctionCallWithOneArg (src/reify/ZodSchemaReifier.ts:794:17)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at tests/reify/ZodSchemaReifier.test.ts:1745:13

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at tests/reify/ZodSchemaReifier.test.ts:1748:13

  console.log
     >>>>>>> testCase.testMarkdown is :[undefined]

      at tests/reify/ZodSchemaReifier.test.ts:1751:13

  console.log
     >>>>>>> testCase.expectedFrontmatter is :[[
      {
        "first": [
          "I am in the [first]",
          "I am an example of a tuple as defined by zod"
        ]
      },
      {
        "second": [
          "I am in the [second]",
          "I am an example of a tuple as defined by zod"
        ]
      },
      {
        "third": [
          "I am in the [third]",
          "I am an example of a tuple as defined by zod"
        ]
      }
    ]]

      at tests/reify/ZodSchemaReifier.test.ts:1754:14

FAIL tests/reify/ZodSchemaReifier.test.ts (40.368 s)
  Tests of the {@ZodSchemaReifier} reify() method against the zod parse method
    Test the reify() returns a zod schema which successfully parses the test TypeScript Object
      √ which successfully pass the zod parse test (1941 ms)
      √ which successfully pass the zod parse test (1316 ms)
      √ which successfully pass the zod parse test (1176 ms)
      √ which successfully pass the zod parse test (1156 ms)
      √ which successfully pass the zod parse test (1967 ms)
      √ which successfully pass the zod parse test (1885 ms)
      √ which successfully pass the zod parse test (1277 ms)
      √ which successfully pass the zod parse test (1290 ms)
      √ which successfully pass the zod parse test (987 ms)
      √ which successfully pass the zod parse test (1113 ms)
      √ which successfully pass the zod parse test (1329 ms)
      √ which successfully pass the zod parse test (1332 ms)
      √ which successfully pass the zod parse test (1549 ms)
      √ which successfully pass the zod parse test (979 ms)
      √ which successfully pass the zod parse test (940 ms)
      √ which successfully pass the zod parse test (941 ms)
      √ which successfully pass the zod parse test (997 ms)
      √ which successfully pass the zod parse test (949 ms)
      √ which successfully pass the zod parse test (951 ms)
      √ which successfully pass the zod parse test (951 ms)
      √ which successfully pass the zod parse test (957 ms)
      √ which successfully pass the zod parse test (969 ms)
      √ which successfully pass the zod parse test (961 ms)
      √ which successfully pass the zod parse test (964 ms)
      × which successfully pass the zod parse test (966 ms)
      × which successfully pass the zod parse test (969 ms)
  Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method
    Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown
      √ which successfully pass the zod parse test [{"expectedFrontmatter": [Array], "name": "Test #3: markdown frontmatter extraction zodSchema3", "testMarkdown": "---

- voila: oh que oui
- voila: ça marche vraiment!
---

# Hello Pesto ZodSchemaReifier!
", "zodMatterShouldThrow": false, "zodSchema": [ZodNullable], "zodSchemaAsText": "z
  .object({
    voila: z.string(),
  })
  .array()
  .optional()
  .nullable()"}] (1129 ms)
      √ which successfully pass the zod parse test [{"expectedFrontmatter": [Object], "name": "Test #4: markdown frontmatter extraction zodSchema4", "testMarkdown": "---

title: HiDeoo

hereAnother: 

  reseau: 

    cesar: 

      - marc

      - aurèle

      - auguste

  imLackingIdea: true

  itsForATest: false

tags: 

  - william

  - the

  - conquerer

another: true

exampleCategory:

  - - joe

    - alfred

    - alvin

  - - thirteen

    - hundred

    - books

  - - going

    - overseas

    - together

example2Category: 

  - false

  - true

  - false

example3Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

example4Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

image: \"./images/paysages/puydedome.png\"

somethingElseNested:

  firstname: 

    - Jean-Baptiste

    - Marie

    - Éric

  lastname: Lasselle

  color: yellow

  two: false

  three: 

    - 56

    - 789

    - 159

  four: 

    - 15

    - 46

    - 739

  example1Categories: 

    - design

    - terraform

    - plugin

  example2Categories: 

    first:

      - joe

      - alfred

      - alvin

    second:

      - thirteen

      - hundred

      - books

    third:

      - going

      - overseas

      - together

department: 

  divisionName: CCOE

  secrecyTags: 
    - LEVEL3
 
    - NOCOPY

---

# Hello Pesto ZodSchemaReifier!
", "zodMatterShouldThrow": false, "zodSchema": [ZodOptional], "zodSchemaAsText": "z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })
  .optional()"}] (2216 ms)
      √ which successfully pass the zod parse test [{"expectedFrontmatter": [Object], "name": "Test #5: markdown frontmatter extraction zodSchema5", "testMarkdown": "---

title: HiDeoo

hereAnother:

  reseau:

    cesar:

      - marc

      - aurèle

      - auguste

  imLackingIdea: true

  itsForATest: false

tags: 

  - william

  - the

  - conquerer

another: true

exampleCategory:

  - - joe

    - alfred

    - alvin

  - - thirteen

    - hundred

    - books

  - - going

    - overseas

    - together

example2Category: 

  - false

  - true

  - false

example3Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

example4Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

image: \"./images/paysages/puydedome.png\"

somethingElseNested:

  firstname: 

    - Jean-Baptiste

    - Marie

    - Éric

  lastname: Lasselle

  color: yellow

  two: false

  three: 

    - 56

    - 789

    - 159

  four: 

    - 15

    - 46

    - 739

  example1Categories: 

    - design

    - terraform

    - plugin

  example2Categories: 

    first:

      - joe

      - alfred

      - alvin

    second:

      - thirteen

      - hundred

      - books

    third:

      - going

      - overseas

      - together

department: 

  divisionName: CCOE

  secrecyTags: 
    - LEVEL3
 
    - NOCOPY

---

# Hello Pesto ZodSchemaReifier!
", "zodMatterShouldThrow": false, "zodSchema": [ZodObject], "zodSchemaAsText": "z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })"}] (1859 ms)
      √ [{"expectedFrontmatter": [Array], "name": "Test #6: markdown frontmatter extraction zodSchema6", "testMarkdown": undefined, "zodMatterShouldThrow": true, "zodSchema": [ZodTuple], "zodSchemaAsText": "z.tuple([
      z.object({first: z.array(z.string())}),
      z.object({second: z.array(z.string())}),
      z.object({third: z.array(z.string())}),
    ])"}] should throw an error because zod matter parse does not accept zod tuples as input schema (1210 ms)

  ● Tests of the {@ZodSchemaReifier} reify() method against the zod parse method › Test the reify() returns a zod schema which successfully parses the test TypeScript Object › which successfully pass the zod parse test

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 1662 |[39m       expect(
     [90m 1663 |[39m         testCase[33m.[39mzodSchema[33m.[39msafeParse(testCase[33m.[39mtestTsObjectToValidate)[33m.[39msuccess
    [31m[1m>[22m[39m[90m 1664 |[39m       )[33m.[39mtoBe(testCase[33m.[39mexpect)[33m;[39m
     [90m      |[39m         [31m[1m^[22m[39m
     [90m 1665 |[39m       expect(
     [90m 1666 |[39m         reifiedZodSchema[33m.[39msafeParse(testCase[33m.[39mtestTsObjectToValidate)[33m.[39msuccess
     [90m 1667 |[39m       )[33m.[39mtoBe(testCase[33m.[39mexpect)[33m;[39m[0m

      at tests/reify/ZodSchemaReifier.test.ts:1664:9

  ● Tests of the {@ZodSchemaReifier} reify() method against the zod parse method › Test the reify() returns a zod schema which successfully parses the test TypeScript Object › which successfully pass the zod parse test

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 1662 |[39m       expect(
     [90m 1663 |[39m         testCase[33m.[39mzodSchema[33m.[39msafeParse(testCase[33m.[39mtestTsObjectToValidate)[33m.[39msuccess
    [31m[1m>[22m[39m[90m 1664 |[39m       )[33m.[39mtoBe(testCase[33m.[39mexpect)[33m;[39m
     [90m      |[39m         [31m[1m^[22m[39m
     [90m 1665 |[39m       expect(
     [90m 1666 |[39m         reifiedZodSchema[33m.[39msafeParse(testCase[33m.[39mtestTsObjectToValidate)[33m.[39msuccess
     [90m 1667 |[39m       )[33m.[39mtoBe(testCase[33m.[39mexpect)[33m;[39m[0m

      at tests/reify/ZodSchemaReifier.test.ts:1664:9

Test Suites: 1 failed, 1 total
Tests:       2 failed, 28 passed, 30 total
Snapshots:   0 total
Time:        40.483 s, estimated 41 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.
