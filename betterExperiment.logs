
> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:581:15)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
     >>>>>>> resultOfZodParse :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "hereAnother"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "tags"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
              "another"
            ],
            "message": "Required"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "exampleCategory"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example2Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example3Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example4Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "somethingElseNested"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "department"
            ],
            "message": "Expected string, received object"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:651:15)

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:681:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1061:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1066:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1041:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:692:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:695:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse3) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "super bien!"
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:698:15)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:716:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:727:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:730:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse5) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "hereAnother"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "tags"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "boolean",
            "path": [
              "another"
            ],
            "message": "Expected string, received boolean"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "exampleCategory"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example2Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example3Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example4Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "somethingElseNested"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "department"
            ],
            "message": "Expected string, received object"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:733:15)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:757:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:895:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:768:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:771:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse6) is :[{
      "success": true,
      "data": [
        {
          "first": [
            "I am in the [first]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "second": [
            "I am in the [second]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "third": [
            "I am in the [third]",
            "I am an example of a tuple as defined by zod"
          ]
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:774:15)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:792:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:895:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1041:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1066:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:802:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:805:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse7) is :[{
      "success": true,
      "data": [
        {
          "first": [
            "I am in the [first]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "second": [
            "I am in the [second]",
            "I am an example of a tuple as defined by zod"
          ]
        },
        {
          "third": [
            "I am in the [third]",
            "I am an example of a tuple as defined by zod"
          ]
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:808:15)

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:830:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean().nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:976:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1041:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1066:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:841:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:844:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse8) is :[{
      "success": true,
      "data": false
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:847:15)

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:869:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish()).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish())",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.boolean().nullish())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullish]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:976:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1046:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1041:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1066:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:880:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:883:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse9) is :[{
      "success": true,
      "data": [
        true,
        false,
        true
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:886:15)

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:908:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1061:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1066:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:919:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:922:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse2) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "vraiment super bien!"
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:925:15)

  console.log
     >>>>>>> zodSchemaAsText1 : [z
      .object({
        voila: z.string(),
      })
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:947:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:971:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1066:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:957:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:960:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse1) is :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "object",
            "received": "null",
            "path": [],
            "message": "Expected object, received null"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:963:15)

FAIL tests/parser/ZodSchemaParser.test.ts (13.415 s)
  Testing - ZodSchemaParser parse() method
    Test the parse() method properly instantiate the zod schema
      × shall return the same extracted frontmatter  (2054 ms)
  Testing - ZodSchemaParser experiment() method
    Test the experiment() method properly find the top function call in the zod schema
      × shall return the top function call  (1344 ms)
      × shall return the top function call  (1450 ms)
      √ shall return the top function call  (1246 ms)
      √ shall return the top function call  (1276 ms)
      × shall return the top function call  (973 ms)
      √ shall return the top function call  (1098 ms)
      √ shall return the top function call  (1067 ms)
      × shall return the top function call  (1065 ms)

  ● Testing - ZodSchemaParser parse() method › Test the parse() method properly instantiate the zod schema › shall return the same extracted frontmatter 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 652 |[39m         [32m` >>>>>>> resultOfZodParse :[${JSON.stringify(resultOfZodParse, null, 2)}]`[39m
     [90m 653 |[39m       )[33m;[39m
    [31m[1m>[22m[39m[90m 654 |[39m       expect(resultOfZodParse[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                        [31m[1m^[22m[39m
     [90m 655 |[39m     })[33m;[39m
     [90m 656 |[39m
     [90m 657 |[39m   })[33m;[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:654:40)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: [{"voila": "ça marche"}, {"voila": "super bien!"}]

    [0m [90m 700 |[39m       )[33m;[39m
     [90m 701 |[39m       expect([32m`${(typeof reifiedZodSchema)}`[39m)[33m.[39mtoEqual([32m`${(typeof zodSchemaInstance3)}`[39m)
    [31m[1m>[22m[39m[90m 702 |[39m       expect(zodSchemaInstance3[33m.[39mparse(testTsObjectToParse3))[33m.[39mtoBe([36mtrue[39m)
     [90m     |[39m                                                              [31m[1m^[22m[39m
     [90m 703 |[39m       expect(reifiedZodSchema[33m.[39msafeParse(testTsObjectToParse3)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m 704 |[39m
     [90m 705 |[39m       [90m// const { data } = zodMatterParse(testMarkDown3, reifiedZodSchema) // zod-matter expects a zod schema of type "AnyZodObject", but this test case is not  it's a // ZodNullable etc..[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:702:62)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 735 |[39m       )[33m;[39m
     [90m 736 |[39m       expect([32m`${(typeof reifiedZodSchema)}`[39m)[33m.[39mtoEqual([32m`${(typeof zodSchemaInstance5)}`[39m)
    [31m[1m>[22m[39m[90m 737 |[39m       expect(zodSchemaInstance5[33m.[39msafeParse(testTsObjectToParse5)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)
     [90m     |[39m                                                                          [31m[1m^[22m[39m
     [90m 738 |[39m       expect(reifiedZodSchema[33m.[39msafeParse(testTsObjectToParse5)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m 739 |[39m
     [90m 740 |[39m       [90m/**[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:737:74)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    expect(received).toEqual(expected) // deep equality

    Expected: "boolean"
    Received: "object"

    [0m [90m 848 |[39m         [32m` >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse8) is :[${JSON.stringify(reifiedZodSchema.safeParse(testTsObjectToParse8), null, 2)}]`[39m
     [90m 849 |[39m       )[33m;[39m
    [31m[1m>[22m[39m[90m 850 |[39m       expect([32m`${(typeof reifiedZodSchema)}`[39m)[33m.[39mtoEqual([32m`${(typeof testTsObjectToParse8)}`[39m)
     [90m     |[39m                                              [31m[1m^[22m[39m
     [90m 851 |[39m       expect(zodSchema8[33m.[39msafeParse(testTsObjectToParse8)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)
     [90m 852 |[39m       expect(reifiedZodSchema[33m.[39msafeParse(testTsObjectToParse8)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m 853 |[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:850:46)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 965 |[39m       )[33m;[39m
     [90m 966 |[39m       expect([32m`${(typeof reifiedZodSchema)}`[39m)[33m.[39mtoEqual([32m`${(typeof testTsObjectToParse1)}`[39m)
    [31m[1m>[22m[39m[90m 967 |[39m       expect(zodSchemaInstance2[33m.[39msafeParse(testTsObjectToParse1)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)
     [90m     |[39m                                                                          [31m[1m^[22m[39m
     [90m 968 |[39m       expect(reifiedZodSchema[33m.[39msafeParse(testTsObjectToParse1)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m 969 |[39m
     [90m 970 |[39m       [90m/**[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:967:74)

Test Suites: 1 failed, 1 total
Tests:       5 failed, 4 passed, 9 total
Snapshots:   0 total
Time:        13.52 s, estimated 14 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.
