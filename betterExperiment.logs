
> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

 ELIFECYCLE  Test failed. See above for more details.

> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

FAIL tests/parser/ZodSchemaParser.test.ts
  ● Test suite failed to run

    [96msrc/parser/ZodSchemaParser.ts[0m:[93m664[0m:[93m21[0m - [91merror[0m[90m TS2339: [0mProperty 'reifyArrayLiteralExpression' does not exist on type 'ZodSchemaParser'.

    [7m664[0m         return this.reifyArrayLiteralExpression(processedNode)
    [7m   [0m [91m                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        2.272 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.

> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:275:15)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:983:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:988:17)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [reseau: z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cesar:z.array(z.string()),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[nullish]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [nullish]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2038:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2039:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.array(z.string().nullable()))] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.array(z.string().nullable())]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.array(z.string().nullable())]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2942:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction="array",
                    descendantCalledFunctionParams[0]="z.string().nullable()"
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2943:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string().nullable()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z.string()],
                    descendantCalledFunctionInParams=[nullable]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[nullable]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [nullable]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2050:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2051:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.nullable(z.array(z.boolean()))] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[nullable],
                    descendantCalledFunctionParams[0]=[z.array(z.boolean())]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[nullable] calledFunctionParam=[z.array(z.boolean())]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - Ok this calledFunction is an [nullable]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2956:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction="array",
                    descendantCalledFunctionParams[0]="z.boolean()"
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2957:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.boolean()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[boolean]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.optional(z.number())] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2347:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[optional],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2348:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[optional] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') -  Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2626:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') -  will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2627:21)

  console.log
    Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2631:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.number())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2026:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2027:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.number().array()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z.number()],
                    descendantCalledFunction=[array]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.number()] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2026:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[number]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2027:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.number())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.string())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.string()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
     >>>>>>> resultOfZodParse :[{
      "success": true,
      "data": {
        "title": "Exemple5",
        "hereAnother": {
          "reseau": {
            "cesar": [
              "Marc",
              "Aurèle"
            ]
          },
          "imLackingIdea": false,
          "itsForATest": true
        },
        "tags": [
          "Collège",
          "de",
          "France"
        ],
        "exampleCategory": [
          [
            null
          ]
        ],
        "example2Category": [
          true,
          false,
          false
        ],
        "example3Category": [
          56.02,
          68.12,
          89
        ],
        "example4Category": [
          45.6,
          24.8,
          75.69
        ],
        "image": "https://www.college-de-france.fr/sites/default/files/styles/1_1_header_portrait_s/public/media/portrait/2024-07/Francois-Marie-Breon.jpg?h=f0d95172&itok=JcMp_Fyk",
        "somethingElseNested": {
          "firstname": [
            "François",
            "Marie"
          ],
          "lastname": "Bréon",
          "color": "yellow",
          "two": true,
          "three": [
            12,
            74,
            163
          ],
          "four": [
            17,
            23,
            97
          ]
        },
        "department": {
          "divisionName": "Devops",
          "secrecyTags": [
            "LEVEL1"
          ]
        }
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:345:15)

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:375:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:983:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:988:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1000:19)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1016:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable]

      at src/parser/ZodSchemaParser.ts:1019:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1016:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1019:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1023:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node children count is :[1]

      at src/parser/ZodSchemaParser.ts:1028:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  calledFunctionName is :[optional]

      at src/parser/ZodSchemaParser.ts:1040:25

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1016:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1019:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1016:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1019:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1023:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node children count is :[1]

      at src/parser/ZodSchemaParser.ts:1028:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  calledFunctionName is :[array]

      at src/parser/ZodSchemaParser.ts:1040:25

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1016:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1019:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1016:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1019:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1023:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node children count is :[2]

      at src/parser/ZodSchemaParser.ts:1028:23

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCallsChain()] - length of the [noArgsFunctionCallsStack] array before [pop()] = [3]

      at ZodSchemaParser.reifyNoArgsZodFunctionCallsChain (src/parser/ZodSchemaParser.ts:1101:17)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCallsChain()] - length of the [noArgsFunctionCallsStack] array after [pop()] = [2]

      at ZodSchemaParser.reifyNoArgsZodFunctionCallsChain (src/parser/ZodSchemaParser.ts:1103:17)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:406:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:983:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:988:17)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [reseau: z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cesar:z.array(z.string()),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[nullish]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [nullish]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2038:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2039:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.array(z.string().nullable()))] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.array(z.string().nullable())]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.array(z.string().nullable())]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2942:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction="array",
                    descendantCalledFunctionParams[0]="z.string().nullable()"
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2943:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string().nullable()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z.string()],
                    descendantCalledFunctionInParams=[nullable]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[nullable]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [nullable]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2050:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2051:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.nullable(z.array(z.boolean()))] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[nullable],
                    descendantCalledFunctionParams[0]=[z.array(z.boolean())]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[nullable] calledFunctionParam=[z.array(z.boolean())]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - Ok this calledFunction is an [nullable]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2956:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction="array",
                    descendantCalledFunctionParams[0]="z.boolean()"
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2957:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.boolean()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[boolean]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.optional(z.number())] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2347:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[optional],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2348:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[optional] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') -  Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2626:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') -  will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2627:21)

  console.log
    Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2631:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.number())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2026:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2027:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.number().array()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z.number()],
                    descendantCalledFunction=[array]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.number()] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2026:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[number]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2027:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.number())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.string())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.string()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:415:15)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[2]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:418:15)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs :[z.object]

      at tests/parser/ZodSchemaParser.test.ts:422:17
          at Array.forEach (<anonymous>)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at tests/parser/ZodSchemaParser.test.ts:422:17
          at Array.forEach (<anonymous>)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:437:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:983:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:988:17)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:468:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:983:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:988:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1000:19)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1016:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1019:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1016:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1019:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1023:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node children count is :[1]

      at src/parser/ZodSchemaParser.ts:1028:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  calledFunctionName is :[nullable]

      at src/parser/ZodSchemaParser.ts:1040:25

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1016:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable]

      at src/parser/ZodSchemaParser.ts:1019:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1016:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1019:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1023:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node children count is :[2]

      at src/parser/ZodSchemaParser.ts:1028:23

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:498:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable().optional]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:527:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[array]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullish()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullish]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullish]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:557:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:590:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1311:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1318:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [reseau: z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cesar:z.array(z.string()),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[nullish]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [nullish]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2038:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2039:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.array(z.string().nullable()))] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.array(z.string().nullable())]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.array(z.string().nullable())]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2942:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction="array",
                    descendantCalledFunctionParams[0]="z.string().nullable()"
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2943:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string().nullable()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z.string()],
                    descendantCalledFunctionInParams=[nullable]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[nullable]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [nullable]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2050:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2051:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.nullable(z.array(z.boolean()))] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[nullable],
                    descendantCalledFunctionParams[0]=[z.array(z.boolean())]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[nullable] calledFunctionParam=[z.array(z.boolean())]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - Ok this calledFunction is an [nullable]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2956:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction="array",
                    descendantCalledFunctionParams[0]="z.boolean()"
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2957:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.boolean()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[boolean]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.optional(z.number())] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2347:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[optional],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2348:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[optional] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') -  Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2626:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') -  will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2627:21)

  console.log
    Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2631:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.number())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2026:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2027:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1727:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.number().array()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2014:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z.number()],
                    descendantCalledFunction=[array]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2015:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.number()] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2026:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[number]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2027:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.number())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1732:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:711:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:730:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:737:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:740:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1415:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1420:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1423:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.string())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2335:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.string()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2336:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2428:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2641:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2642:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2646:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1718:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1722:21)

FAIL tests/parser/ZodSchemaParser.test.ts (15.373 s)
  Testing - ZodSchemaParser parse() method
    Test the parse() method properly instantiate the zod schema
      √ shall return the same extracted frontmatter  (2320 ms)
  Testing - ZodSchemaParser experiment() method
    Test the experiment() method properly find the top function call in the zod schema
      × shall return the top function call  (1312 ms)
      √ shall return the top function call  (1444 ms)
      × shall return the top function call  (1127 ms)
      × shall return the top function call  (1185 ms)
      × shall return the top function call  (958 ms)
      × shall return the top function call  (1128 ms)
      × shall return the top function call  (1094 ms)
      × shall return the top function call  (1391 ms)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[reifyNoArgsZodFunctionCallsChain(): any] - ERROR, could not determine the zod function which matches [zodFunctionName=nullable]

    [0m [90m 1175 |[39m   
     [90m 1176 |[39m           [36mdefault[39m[33m:[39m
    [31m[1m>[22m[39m[90m 1177 |[39m             [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 1178 |[39m               [32m`[@ZodSchemaParser].[reifyNoArgsZodFunctionCallsChain(): any] - ERROR, could not determine the zod function which matches [zodFunctionName=${zodFunctionName}]`[39m
     [90m 1179 |[39m             )[33m;[39m
     [90m 1180 |[39m             [36mbreak[39m[33m;[39m[0m

      at ZodSchemaParser.reifyNoArgsZodFunctionCallsChain (src/parser/ZodSchemaParser.ts:1177:19)
      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1086:48)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:380:132)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[reifyZodFunctionCallWithArgs] - method implementation not completed for case [calledFunction] is the tuple zod function

    [0m [90m 370 |[39m         }
     [90m 371 |[39m       } [36melse[39m [36mif[39m (calledFunction[33m.[39mprint() [33m===[39m [32m`${this.nameOfTheZodImport}.tuple`[39m) {
    [31m[1m>[22m[39m[90m 372 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m([32m`[@ZodSchemaParser].[reifyZodFunctionCallWithArgs] - method implementation not completed for case [calledFunction] is the tuple zod function`[39m)
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 373 |[39m       } [36melse[39m {
     [90m 374 |[39m         [36mconst[39m calledZodFunctionName[33m:[39m string [33m=[39m calledFunction[33m.[39mprint()[33m.[39msubstring([32m`${this.nameOfTheZodImport}.`[39m[33m.[39mlength [33m-[39m [35m1[39m)
     [90m 375 |[39m         [36mswitch[39m (calledZodFunctionName) { [90m// reifyNoArgsZodFunctionCallsChain[39m[0m

      at ZodSchemaParser.reifyZodFunctionCallWithArgs (src/parser/ZodSchemaParser.ts:372:15)
      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1086:86)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:442:132)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[reifyZodFunctionCallWithArgs] - method implementation not completed for case [calledFunction] is the tuple zod function

    [0m [90m 370 |[39m         }
     [90m 371 |[39m       } [36melse[39m [36mif[39m (calledFunction[33m.[39mprint() [33m===[39m [32m`${this.nameOfTheZodImport}.tuple`[39m) {
    [31m[1m>[22m[39m[90m 372 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m([32m`[@ZodSchemaParser].[reifyZodFunctionCallWithArgs] - method implementation not completed for case [calledFunction] is the tuple zod function`[39m)
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 373 |[39m       } [36melse[39m {
     [90m 374 |[39m         [36mconst[39m calledZodFunctionName[33m:[39m string [33m=[39m calledFunction[33m.[39mprint()[33m.[39msubstring([32m`${this.nameOfTheZodImport}.`[39m[33m.[39mlength [33m-[39m [35m1[39m)
     [90m 375 |[39m         [36mswitch[39m (calledZodFunctionName) { [90m// reifyNoArgsZodFunctionCallsChain[39m[0m

      at ZodSchemaParser.reifyZodFunctionCallWithArgs (src/parser/ZodSchemaParser.ts:372:15)
      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1086:86)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:473:132)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:501:30)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:530:30)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg(): any] - ERROR, could not determine the zod function which matches [calledFunctionName=object]

    [0m [90m 853 |[39m
     [90m 854 |[39m         [36mdefault[39m[33m:[39m
    [31m[1m>[22m[39m[90m 855 |[39m           [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m                 [31m[1m^[22m[39m
     [90m 856 |[39m             [32m`[@ZodSchemaParser].[reifyZodFunctionCallWithOneArg(): any] - ERROR, could not determine the zod function which matches [calledFunctionName=${calledFunctionName}]`[39m
     [90m 857 |[39m           )[33m;[39m
     [90m 858 |[39m           [36mbreak[39m[33m;[39m[0m

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:855:17)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:621:23)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:645:55)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:645:55)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:562:138)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg(): any] - ERROR, could not determine the zod function which matches [calledFunctionName=object]

    [0m [90m 853 |[39m
     [90m 854 |[39m         [36mdefault[39m[33m:[39m
    [31m[1m>[22m[39m[90m 855 |[39m           [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m                 [31m[1m^[22m[39m
     [90m 856 |[39m             [32m`[@ZodSchemaParser].[reifyZodFunctionCallWithOneArg(): any] - ERROR, could not determine the zod function which matches [calledFunctionName=${calledFunctionName}]`[39m
     [90m 857 |[39m           )[33m;[39m
     [90m 858 |[39m           [36mbreak[39m[33m;[39m[0m

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:855:17)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:621:23)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:595:138)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        15.481 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.

> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:275:15)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1017:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1022:17)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [reseau: z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cesar:z.array(z.string()),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2048:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2049:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1761:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1761:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[nullish]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [nullish]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2072:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2073:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1761:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.array(z.string().nullable()))] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2369:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.array(z.string().nullable())]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2370:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.array(z.string().nullable())]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2976:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction="array",
                    descendantCalledFunctionParams[0]="z.string().nullable()"
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2977:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string().nullable()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z.string()],
                    descendantCalledFunctionInParams=[nullable]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[nullable]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [nullable]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2084:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2085:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.nullable(z.array(z.boolean()))] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2369:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[nullable],
                    descendantCalledFunctionParams[0]=[z.array(z.boolean())]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2370:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[nullable] calledFunctionParam=[z.array(z.boolean())]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - Ok this calledFunction is an [nullable]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2990:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction="array",
                    descendantCalledFunctionParams[0]="z.boolean()"
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2991:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.boolean()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[boolean]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1761:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.optional(z.number())] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2381:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[optional],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2382:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[optional] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') -  Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2660:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') -  will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2661:21)

  console.log
    Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2665:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1766:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.number())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2369:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2370:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1766:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2048:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2049:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2060:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2061:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2048:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2049:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1761:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.number().array()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2048:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z.number()],
                    descendantCalledFunction=[array]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2049:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.number()] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2060:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[number]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2061:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1766:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.number())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2369:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2370:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1766:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.string())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2369:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.string()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2370:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
     >>>>>>> resultOfZodParse :[{
      "success": true,
      "data": {
        "title": "Exemple5",
        "hereAnother": {
          "reseau": {
            "cesar": [
              "Marc",
              "Aurèle"
            ]
          },
          "imLackingIdea": false,
          "itsForATest": true
        },
        "tags": [
          "Collège",
          "de",
          "France"
        ],
        "exampleCategory": [
          [
            null
          ]
        ],
        "example2Category": [
          true,
          false,
          false
        ],
        "example3Category": [
          56.02,
          68.12,
          89
        ],
        "example4Category": [
          45.6,
          24.8,
          75.69
        ],
        "image": "https://www.college-de-france.fr/sites/default/files/styles/1_1_header_portrait_s/public/media/portrait/2024-07/Francois-Marie-Breon.jpg?h=f0d95172&itok=JcMp_Fyk",
        "somethingElseNested": {
          "firstname": [
            "François",
            "Marie"
          ],
          "lastname": "Bréon",
          "color": "yellow",
          "two": true,
          "three": [
            12,
            74,
            163
          ],
          "four": [
            17,
            23,
            97
          ]
        },
        "department": {
          "divisionName": "Devops",
          "secrecyTags": [
            "LEVEL1"
          ]
        }
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:345:15)

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:375:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1017:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1022:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1034:19)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1050:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable]

      at src/parser/ZodSchemaParser.ts:1053:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1050:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1053:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1057:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node children count is :[1]

      at src/parser/ZodSchemaParser.ts:1062:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  calledFunctionName is :[optional]

      at src/parser/ZodSchemaParser.ts:1074:25

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1050:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1053:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1050:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1053:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1057:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node children count is :[1]

      at src/parser/ZodSchemaParser.ts:1062:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  calledFunctionName is :[array]

      at src/parser/ZodSchemaParser.ts:1074:25

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1050:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1053:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1050:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1053:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1057:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node children count is :[2]

      at src/parser/ZodSchemaParser.ts:1062:23

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCallsChain()] - length of the [noArgsFunctionCallsStack] array before [pop()] = [3]

      at ZodSchemaParser.reifyNoArgsZodFunctionCallsChain (src/parser/ZodSchemaParser.ts:1135:17)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCallsChain()] - length of the [noArgsFunctionCallsStack] array after [pop()] = [2]

      at ZodSchemaParser.reifyNoArgsZodFunctionCallsChain (src/parser/ZodSchemaParser.ts:1137:17)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:406:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1017:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1022:17)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [reseau: z.object({ cesar: z.array(z.string()), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [reseau]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({cesar:z.array(z.string()),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [cesar: z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [cesar]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [imLackingIdea: z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [imLackingIdea]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2048:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2049:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1761:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [itsForATest: z.boolean()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [itsForATest]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1761:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[nullish]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [nullish]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2072:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2073:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1761:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.array(z.string().nullable()))] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2369:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.array(z.string().nullable())]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2370:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.array(z.string().nullable())]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2976:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction="array",
                    descendantCalledFunctionParams[0]="z.string().nullable()"
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2977:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string().nullable()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z.string()],
                    descendantCalledFunctionInParams=[nullable]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[nullable]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [nullable]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2084:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2085:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.nullable(z.array(z.boolean()))] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2369:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[nullable],
                    descendantCalledFunctionParams[0]=[z.array(z.boolean())]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2370:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[nullable] calledFunctionParam=[z.array(z.boolean())]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - Ok this calledFunction is an [nullable]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2990:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction="array",
                    descendantCalledFunctionParams[0]="z.boolean()"
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2991:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.boolean()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[boolean]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1761:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.optional(z.number())] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2381:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[optional],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2382:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[optional] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') -  Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2660:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') -  will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2661:21)

  console.log
    Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2665:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1766:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.number())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2369:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2370:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1766:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2048:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2049:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [firstname: z.string().array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [firstname]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().array()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.string()] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2060:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[string]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2061:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [lastname: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [lastname]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [color: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [color]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [two: z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [two]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.boolean()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2048:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[boolean]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2049:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [boolean]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1761:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [three: z.number().array().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [three]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.number().array().optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.number().array()] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2048:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z.number()],
                    descendantCalledFunction=[array]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2049:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.number()] calledFunction=[array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2060:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller DOES endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCaller=[z],
                    descendantCalledFunction=[number]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2061:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1766:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [four: z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [four]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.number())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2369:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.number()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2370:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.number()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[number]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [number]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1766:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [divisionName: z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [divisionName]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral = [secrecyTags: z.array(z.string()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1449:19)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.name = [secrecyTags]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1454:21)

  console.log
    [@ZodSchemaParser].[parse()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string()).optional()]

      at ZodSchemaParser.instantiateZodJsonConfig (src/parser/ZodSchemaParser.ts:1457:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z.array(z.string())] calledFunction=[optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - Ok this calledFunction is an [optional]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2369:23)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller does NOT endsWith('()') - will call this.instantiateFunctionCalledWithParamsFrom(
                    descendantCalledFunction=[array],
                    descendantCalledFunctionParams[0]=[z.string()]
                  )

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:2370:23)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - START with params calledFunction=[array] calledFunctionParam=[z.string()]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2462:15)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2675:21)

  console.log
    [@ZodSchemaParser].[instantiateFunctionCalledWithParamsFrom()] - calledFunctionParam does endsWith('()') - will call this.instantiateLeafFunctionCallFrom(
                    descendantCallerInParams=[z],
                    descendantCalledFunctionInParams=[string]
                  )

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2676:21)

  console.log
    Ok this calledFunction is an [array]

      at ZodSchemaParser.instantiateFunctionCalledWithParamsFrom (src/parser/ZodSchemaParser.ts:2680:21)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - START with params caller=[z] calledFunction=[string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1752:15)

  console.log
    [@ZodSchemaParser].[instantiateLeafFunctionCallFrom()] - caller is the zod named import - Ok this calledFunction is an [string]

      at ZodSchemaParser.instantiateLeafFunctionCallFrom (src/parser/ZodSchemaParser.ts:1756:21)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:415:15)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[2]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:418:15)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs :[z.object]

      at tests/parser/ZodSchemaParser.test.ts:422:17
          at Array.forEach (<anonymous>)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at tests/parser/ZodSchemaParser.test.ts:422:17
          at Array.forEach (<anonymous>)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:437:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1017:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1022:17)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:468:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1017:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1022:17)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1034:19)

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1050:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1053:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1050:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1053:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1057:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node children count is :[1]

      at src/parser/ZodSchemaParser.ts:1062:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  calledFunctionName is :[nullable]

      at src/parser/ZodSchemaParser.ts:1074:25

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1050:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable]

      at src/parser/ZodSchemaParser.ts:1053:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1050:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1053:21

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1057:23

  console.log
    [@ZodSchemaParser].[experiment()] - processedNode.forEachDescendant() -  selected CallExpression node children count is :[2]

      at src/parser/ZodSchemaParser.ts:1062:23

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:498:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable().optional]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:527:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[array]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullish()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullish]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullish]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:557:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:762:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:776:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:781:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:788:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:791:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:795:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:910:19)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:590:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1345:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1352:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:762:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:776:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:781:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:788:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:791:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:795:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:910:19)

FAIL tests/parser/ZodSchemaParser.test.ts (15.171 s)
  Testing - ZodSchemaParser parse() method
    Test the parse() method properly instantiate the zod schema
      √ shall return the same extracted frontmatter  (2332 ms)
  Testing - ZodSchemaParser experiment() method
    Test the experiment() method properly find the top function call in the zod schema
      × shall return the top function call  (1313 ms)
      √ shall return the top function call  (1441 ms)
      × shall return the top function call  (1126 ms)
      × shall return the top function call  (1219 ms)
      × shall return the top function call  (988 ms)
      × shall return the top function call  (1133 ms)
      × shall return the top function call  (1142 ms)
      × shall return the top function call  (1182 ms)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[reifyNoArgsZodFunctionCallsChain(): any] - ERROR, could not determine the zod function which matches [zodFunctionName=nullable]

    [0m [90m 1209 |[39m   
     [90m 1210 |[39m           [36mdefault[39m[33m:[39m
    [31m[1m>[22m[39m[90m 1211 |[39m             [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 1212 |[39m               [32m`[@ZodSchemaParser].[reifyNoArgsZodFunctionCallsChain(): any] - ERROR, could not determine the zod function which matches [zodFunctionName=${zodFunctionName}]`[39m
     [90m 1213 |[39m             )[33m;[39m
     [90m 1214 |[39m             [36mbreak[39m[33m;[39m[0m

      at ZodSchemaParser.reifyNoArgsZodFunctionCallsChain (src/parser/ZodSchemaParser.ts:1211:19)
      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1120:48)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:380:132)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[reifyZodFunctionCallWithArgs] - method implementation not completed for case [calledFunction] is the tuple zod function

    [0m [90m 370 |[39m         }
     [90m 371 |[39m       } [36melse[39m [36mif[39m (calledFunction[33m.[39mprint() [33m===[39m [32m`${this.nameOfTheZodImport}.tuple`[39m) {
    [31m[1m>[22m[39m[90m 372 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m([32m`[@ZodSchemaParser].[reifyZodFunctionCallWithArgs] - method implementation not completed for case [calledFunction] is the tuple zod function`[39m)
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 373 |[39m       } [36melse[39m {
     [90m 374 |[39m         [36mconst[39m calledZodFunctionName[33m:[39m string [33m=[39m calledFunction[33m.[39mprint()[33m.[39msubstring([32m`${this.nameOfTheZodImport}.`[39m[33m.[39mlength [33m-[39m [35m1[39m)
     [90m 375 |[39m         [36mswitch[39m (calledZodFunctionName) { [90m// reifyNoArgsZodFunctionCallsChain[39m[0m

      at ZodSchemaParser.reifyZodFunctionCallWithArgs (src/parser/ZodSchemaParser.ts:372:15)
      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1120:86)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:442:132)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[reifyZodFunctionCallWithArgs] - method implementation not completed for case [calledFunction] is the tuple zod function

    [0m [90m 370 |[39m         }
     [90m 371 |[39m       } [36melse[39m [36mif[39m (calledFunction[33m.[39mprint() [33m===[39m [32m`${this.nameOfTheZodImport}.tuple`[39m) {
    [31m[1m>[22m[39m[90m 372 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m([32m`[@ZodSchemaParser].[reifyZodFunctionCallWithArgs] - method implementation not completed for case [calledFunction] is the tuple zod function`[39m)
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 373 |[39m       } [36melse[39m {
     [90m 374 |[39m         [36mconst[39m calledZodFunctionName[33m:[39m string [33m=[39m calledFunction[33m.[39mprint()[33m.[39msubstring([32m`${this.nameOfTheZodImport}.`[39m[33m.[39mlength [33m-[39m [35m1[39m)
     [90m 375 |[39m         [36mswitch[39m (calledZodFunctionName) { [90m// reifyNoArgsZodFunctionCallsChain[39m[0m

      at ZodSchemaParser.reifyZodFunctionCallWithArgs (src/parser/ZodSchemaParser.ts:372:15)
      at ZodSchemaParser.experiment (src/parser/ZodSchemaParser.ts:1120:86)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:473:132)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:501:30)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:530:30)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of null (reading 'string')

    [0m [90m 909 |[39m         [36mcase[39m [32m"string"[39m[33m:[39m {
     [90m 910 |[39m           console[33m.[39mlog([32m`[@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string]`[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 911 |[39m           [36mreturn[39m caller[33m.[39mstring()[33m;[39m
     [90m     |[39m                         [31m[1m^[22m[39m
     [90m 912 |[39m           [90m// break;[39m
     [90m 913 |[39m         }
     [90m 914 |[39m         [36mcase[39m [32m"boolean"[39m[33m:[39m {[0m

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:911:25)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:645:23)
      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:798:80)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:661:21)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:621:110)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:645:55)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:645:55)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:562:138)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of null (reading 'string')

    [0m [90m 909 |[39m         [36mcase[39m [32m"string"[39m[33m:[39m {
     [90m 910 |[39m           console[33m.[39mlog([32m`[@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string]`[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 911 |[39m           [36mreturn[39m caller[33m.[39mstring()[33m;[39m
     [90m     |[39m                         [31m[1m^[22m[39m
     [90m 912 |[39m           [90m// break;[39m
     [90m 913 |[39m         }
     [90m 914 |[39m         [36mcase[39m [32m"boolean"[39m[33m:[39m {[0m

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:911:25)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:645:23)
      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:798:80)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:661:21)
      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:621:110)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:595:138)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        15.275 s, estimated 16 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.

> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:275:15)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
     >>>>>>> resultOfZodParse :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "hereAnother"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "tags"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
              "another"
            ],
            "message": "Required"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "exampleCategory"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example2Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example3Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example4Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "somethingElseNested"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "department"
            ],
            "message": "Expected string, received object"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:345:15)

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:375:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1037:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1017:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:384:15)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:406:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:415:15)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:437:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:905:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:446:15)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:468:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:905:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1017:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
     >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:477:15)

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:498:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:527:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullish()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullish]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullish]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:557:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1037:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:590:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

FAIL tests/parser/ZodSchemaParser.test.ts (14.79 s)
  Testing - ZodSchemaParser parse() method
    Test the parse() method properly instantiate the zod schema
      × shall return the same extracted frontmatter  (2211 ms)
  Testing - ZodSchemaParser experiment() method
    Test the experiment() method properly find the top function call in the zod schema
      × shall return the top function call  (1331 ms)
      × shall return the top function call  (1382 ms)
      × shall return the top function call  (1265 ms)
      × shall return the top function call  (1321 ms)
      × shall return the top function call  (949 ms)
      × shall return the top function call  (1135 ms)
      √ shall return the top function call  (1109 ms)
      √ shall return the top function call  (1309 ms)

  ● Testing - ZodSchemaParser parse() method › Test the parse() method properly instantiate the zod schema › shall return the same extracted frontmatter 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 346 |[39m         [32m` >>>>>>> resultOfZodParse :[${JSON.stringify(resultOfZodParse, null, 2)}]`[39m
     [90m 347 |[39m       )[33m;[39m
    [31m[1m>[22m[39m[90m 348 |[39m       expect(resultOfZodParse[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                        [31m[1m^[22m[39m
     [90m 349 |[39m     })[33m;[39m
     [90m 350 |[39m
     [90m 351 |[39m   })[33m;[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:348:40)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 386 |[39m       )[33m;[39m
     [90m 387 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 388 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 389 |[39m       )[33m;[39m
     [90m 390 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 391 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:388:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 417 |[39m       )[33m;[39m
     [90m 418 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 419 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 420 |[39m       )[33m;[39m
     [90m 421 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 422 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:419:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 448 |[39m       )[33m;[39m
     [90m 449 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 450 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 451 |[39m       )[33m;[39m
     [90m 452 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 453 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:450:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 479 |[39m       )[33m;[39m
     [90m 480 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 481 |[39m         [32m` >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                                         [31m[1m^[22m[39m
     [90m 482 |[39m       )[33m;[39m
     [90m 483 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 484 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:481:137)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:501:30)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:530:30)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        14.914 s, estimated 17 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.
 ERR_PNPM_UNSUPPORTED_ENGINE  Unsupported environment (bad pnpm and/or Node.js version)

Your pnpm version is incompatible with "C:\Users\Utilisateur\pesto-zod".

Expected version: ~9.10.0
Got: 8.14.1

This is happening because the package's manifest has an engines.pnpm field specified.
To fix this issue, install the required pnpm version globally.

To install the latest version of pnpm, run "pnpm i -g pnpm".
To check your pnpm version, run "pnpm -v".

> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:275:15)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
     >>>>>>> resultOfZodParse :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "hereAnother"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "tags"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
              "another"
            ],
            "message": "Required"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "exampleCategory"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example2Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example3Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example4Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "somethingElseNested"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "department"
            ],
            "message": "Expected string, received object"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:345:15)

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:375:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1037:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1017:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:384:15)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:406:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:415:15)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:437:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:905:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:446:15)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:468:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:905:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1017:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
     >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:477:15)

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:498:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:527:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullish()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullish]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullish]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:557:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1037:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:590:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

FAIL tests/parser/ZodSchemaParser.test.ts (13.825 s)
  Testing - ZodSchemaParser parse() method
    Test the parse() method properly instantiate the zod schema
      × shall return the same extracted frontmatter  (2125 ms)
  Testing - ZodSchemaParser experiment() method
    Test the experiment() method properly find the top function call in the zod schema
      × shall return the top function call  (1379 ms)
      × shall return the top function call  (1388 ms)
      × shall return the top function call  (1267 ms)
      × shall return the top function call  (1326 ms)
      × shall return the top function call  (967 ms)
      × shall return the top function call  (1123 ms)
      √ shall return the top function call  (1111 ms)
      √ shall return the top function call  (1303 ms)

  ● Testing - ZodSchemaParser parse() method › Test the parse() method properly instantiate the zod schema › shall return the same extracted frontmatter 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 346 |[39m         [32m` >>>>>>> resultOfZodParse :[${JSON.stringify(resultOfZodParse, null, 2)}]`[39m
     [90m 347 |[39m       )[33m;[39m
    [31m[1m>[22m[39m[90m 348 |[39m       expect(resultOfZodParse[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                        [31m[1m^[22m[39m
     [90m 349 |[39m     })[33m;[39m
     [90m 350 |[39m
     [90m 351 |[39m   })[33m;[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:348:40)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 386 |[39m       )[33m;[39m
     [90m 387 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 388 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 389 |[39m       )[33m;[39m
     [90m 390 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 391 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:388:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 417 |[39m       )[33m;[39m
     [90m 418 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 419 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 420 |[39m       )[33m;[39m
     [90m 421 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 422 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:419:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 448 |[39m       )[33m;[39m
     [90m 449 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 450 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 451 |[39m       )[33m;[39m
     [90m 452 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 453 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:450:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 479 |[39m       )[33m;[39m
     [90m 480 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 481 |[39m         [32m` >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                                         [31m[1m^[22m[39m
     [90m 482 |[39m       )[33m;[39m
     [90m 483 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 484 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:481:137)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:501:30)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:530:30)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        13.927 s, estimated 15 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.

> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:275:15)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
     >>>>>>> resultOfZodParse :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "hereAnother"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "tags"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
              "another"
            ],
            "message": "Required"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "exampleCategory"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example2Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example3Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example4Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "somethingElseNested"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "department"
            ],
            "message": "Expected string, received object"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:345:15)

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:375:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1037:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1017:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:384:15)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:406:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:415:15)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:437:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:905:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:446:15)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:468:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:905:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1017:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
     >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:477:15)

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:498:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:527:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullish()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullish]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullish]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:557:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1037:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:590:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

FAIL tests/parser/ZodSchemaParser.test.ts (13.739 s)
  Testing - ZodSchemaParser parse() method
    Test the parse() method properly instantiate the zod schema
      × shall return the same extracted frontmatter  (2103 ms)
  Testing - ZodSchemaParser experiment() method
    Test the experiment() method properly find the top function call in the zod schema
      × shall return the top function call  (1377 ms)
      × shall return the top function call  (1375 ms)
      × shall return the top function call  (1250 ms)
      × shall return the top function call  (1312 ms)
      × shall return the top function call  (957 ms)
      × shall return the top function call  (1115 ms)
      √ shall return the top function call  (1121 ms)
      √ shall return the top function call  (1291 ms)

  ● Testing - ZodSchemaParser parse() method › Test the parse() method properly instantiate the zod schema › shall return the same extracted frontmatter 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 346 |[39m         [32m` >>>>>>> resultOfZodParse :[${JSON.stringify(resultOfZodParse, null, 2)}]`[39m
     [90m 347 |[39m       )[33m;[39m
    [31m[1m>[22m[39m[90m 348 |[39m       expect(resultOfZodParse[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                        [31m[1m^[22m[39m
     [90m 349 |[39m     })[33m;[39m
     [90m 350 |[39m
     [90m 351 |[39m   })[33m;[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:348:40)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 386 |[39m       )[33m;[39m
     [90m 387 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 388 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 389 |[39m       )[33m;[39m
     [90m 390 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 391 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:388:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 417 |[39m       )[33m;[39m
     [90m 418 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 419 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 420 |[39m       )[33m;[39m
     [90m 421 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 422 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:419:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 448 |[39m       )[33m;[39m
     [90m 449 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 450 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 451 |[39m       )[33m;[39m
     [90m 452 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 453 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:450:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 479 |[39m       )[33m;[39m
     [90m 480 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 481 |[39m         [32m` >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                                         [31m[1m^[22m[39m
     [90m 482 |[39m       )[33m;[39m
     [90m 483 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 484 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:481:137)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:501:30)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:530:30)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        13.895 s, estimated 14 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.

> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:275:15)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
     >>>>>>> resultOfZodParse :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "hereAnother"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "tags"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
              "another"
            ],
            "message": "Required"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "exampleCategory"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example2Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example3Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example4Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "somethingElseNested"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "department"
            ],
            "message": "Expected string, received object"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:345:15)

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:375:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1037:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1017:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:384:15)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:406:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:415:15)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:437:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:905:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:446:15)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:468:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:905:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1017:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
     >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:477:15)

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:498:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:527:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullish()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullish]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullish]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:557:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1037:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:590:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

FAIL tests/parser/ZodSchemaParser.test.ts (13.951 s)
  Testing - ZodSchemaParser parse() method
    Test the parse() method properly instantiate the zod schema
      × shall return the same extracted frontmatter  (2072 ms)
  Testing - ZodSchemaParser experiment() method
    Test the experiment() method properly find the top function call in the zod schema
      × shall return the top function call  (1397 ms)
      × shall return the top function call  (1471 ms)
      × shall return the top function call  (1288 ms)
      × shall return the top function call  (1342 ms)
      × shall return the top function call  (996 ms)
      × shall return the top function call  (1129 ms)
      √ shall return the top function call  (1113 ms)
      √ shall return the top function call  (1308 ms)

  ● Testing - ZodSchemaParser parse() method › Test the parse() method properly instantiate the zod schema › shall return the same extracted frontmatter 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 346 |[39m         [32m` >>>>>>> resultOfZodParse :[${JSON.stringify(resultOfZodParse, null, 2)}]`[39m
     [90m 347 |[39m       )[33m;[39m
    [31m[1m>[22m[39m[90m 348 |[39m       expect(resultOfZodParse[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                        [31m[1m^[22m[39m
     [90m 349 |[39m     })[33m;[39m
     [90m 350 |[39m
     [90m 351 |[39m   })[33m;[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:348:40)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 386 |[39m       )[33m;[39m
     [90m 387 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 388 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 389 |[39m       )[33m;[39m
     [90m 390 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 391 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:388:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 417 |[39m       )[33m;[39m
     [90m 418 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 419 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 420 |[39m       )[33m;[39m
     [90m 421 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 422 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:419:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 448 |[39m       )[33m;[39m
     [90m 449 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 450 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 451 |[39m       )[33m;[39m
     [90m 452 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 453 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:450:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 479 |[39m       )[33m;[39m
     [90m 480 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 481 |[39m         [32m` >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                                         [31m[1m^[22m[39m
     [90m 482 |[39m       )[33m;[39m
     [90m 483 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 484 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:481:137)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:501:30)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:530:30)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        14.059 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.

> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:275:15)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
     >>>>>>> resultOfZodParse :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "hereAnother"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "tags"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
              "another"
            ],
            "message": "Required"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "exampleCategory"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example2Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example3Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example4Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "somethingElseNested"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "department"
            ],
            "message": "Expected string, received object"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:345:15)

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:375:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1037:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1017:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:384:15)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:406:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:415:15)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:437:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:905:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:446:15)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:468:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[tuple]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ArrayLiteralExpression] is :[[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ first: z.array(z.string()) }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:710:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:724:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:729:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:910:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:735:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:905:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1017:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
     >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:477:15)

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:498:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:527:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array(z.boolean().nullish()).nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean().nullish()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean().nullish]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.boolean()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[boolean]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullish]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[nullable]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:557:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array().optional]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object({ voila: z.string(), }).array]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ voila: z.string(), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1037:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1042:19)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:590:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=PropertyAccessExpression] is :[z.object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[z]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=Identifier] is :[object]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -----------------------------------------

      at src/parser/ZodSchemaParser.ts:1417:19

  console.log
    [@ZodSchemaParser].[initZodObjectLiteral()] - zodSchemaVarDeclaration.forEachDescendant() -  curent node [KindName=ObjectLiteralExpression] is :[{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }]

      at src/parser/ZodSchemaParser.ts:1424:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:301:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:301:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:271:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:606:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:612:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:618:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:764:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:778:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:790:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:793:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:797:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:561:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:564:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:583:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:630:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:636:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:642:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:947:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

FAIL tests/parser/ZodSchemaParser.test.ts (14.065 s)
  Testing - ZodSchemaParser parse() method
    Test the parse() method properly instantiate the zod schema
      × shall return the same extracted frontmatter  (2157 ms)
  Testing - ZodSchemaParser experiment() method
    Test the experiment() method properly find the top function call in the zod schema
      × shall return the top function call  (1401 ms)
      × shall return the top function call  (1477 ms)
      × shall return the top function call  (1284 ms)
      × shall return the top function call  (1321 ms)
      × shall return the top function call  (962 ms)
      × shall return the top function call  (1119 ms)
      √ shall return the top function call  (1112 ms)
      √ shall return the top function call  (1309 ms)

  ● Testing - ZodSchemaParser parse() method › Test the parse() method properly instantiate the zod schema › shall return the same extracted frontmatter 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 346 |[39m         [32m` >>>>>>> resultOfZodParse :[${JSON.stringify(resultOfZodParse, null, 2)}]`[39m
     [90m 347 |[39m       )[33m;[39m
    [31m[1m>[22m[39m[90m 348 |[39m       expect(resultOfZodParse[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                        [31m[1m^[22m[39m
     [90m 349 |[39m     })[33m;[39m
     [90m 350 |[39m
     [90m 351 |[39m   })[33m;[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:348:40)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 386 |[39m       )[33m;[39m
     [90m 387 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 388 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 389 |[39m       )[33m;[39m
     [90m 390 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 391 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:388:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 417 |[39m       )[33m;[39m
     [90m 418 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 419 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 420 |[39m       )[33m;[39m
     [90m 421 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 422 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:419:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 448 |[39m       )[33m;[39m
     [90m 449 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 450 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 451 |[39m       )[33m;[39m
     [90m 452 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 453 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:450:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 479 |[39m       )[33m;[39m
     [90m 480 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 481 |[39m         [32m` >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                                         [31m[1m^[22m[39m
     [90m 482 |[39m       )[33m;[39m
     [90m 483 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 484 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:481:137)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:501:30)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    [@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.

    [0m [90m 263 |[39m       [36mthis[39m[33m.[39minitZodObjectLiteral()[33m;[39m
     [90m 264 |[39m       [36mif[39m ([33m![39m[33mNode[39m[33m.[39misObjectLiteralExpression([36mthis[39m[33m.[39mzodObjectLiteral)) {
    [31m[1m>[22m[39m[90m 265 |[39m         [36mthrow[39m [36mnew[39m [33mError[39m(
     [90m     |[39m               [31m[1m^[22m[39m
     [90m 266 |[39m           [32m`[@ZodSchemaParser].[parse()] - this.zodObjectLiteral should be an [ObjectLiteralExpression], but it is not.`[39m
     [90m 267 |[39m         )[33m;[39m
     [90m 268 |[39m       }[0m

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:265:15)
      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:530:30)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        14.201 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.

> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:365:15)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
     >>>>>>> resultOfZodParse :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "hereAnother"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "tags"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
              "another"
            ],
            "message": "Required"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "exampleCategory"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example2Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example3Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example4Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "somethingElseNested"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "department"
            ],
            "message": "Expected string, received object"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:435:15)

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:465:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1027:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1032:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1007:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:476:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:479:15)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:497:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:506:15)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:528:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:895:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:537:15)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:559:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:895:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1007:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1032:19)

  console.log
     >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:568:15)

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:589:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean().nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:942:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1007:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1032:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:598:15)

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:618:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish()).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish())",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.boolean().nullish())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullish]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:942:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1012:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1007:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1032:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:628:15)

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:648:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1027:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1032:19)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:681:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

FAIL tests/parser/ZodSchemaParser.test.ts (14.48 s)
  Testing - ZodSchemaParser parse() method
    Test the parse() method properly instantiate the zod schema
      × shall return the same extracted frontmatter  (2146 ms)
  Testing - ZodSchemaParser experiment() method
    Test the experiment() method properly find the top function call in the zod schema
      × shall return the top function call  (1469 ms)
      × shall return the top function call  (1485 ms)
      × shall return the top function call  (1319 ms)
      × shall return the top function call  (1302 ms)
      × shall return the top function call  (1003 ms)
      × shall return the top function call  (1164 ms)
      √ shall return the top function call  (1173 ms)
      √ shall return the top function call  (1309 ms)

  ● Testing - ZodSchemaParser parse() method › Test the parse() method properly instantiate the zod schema › shall return the same extracted frontmatter 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 436 |[39m         [32m` >>>>>>> resultOfZodParse :[${JSON.stringify(resultOfZodParse, null, 2)}]`[39m
     [90m 437 |[39m       )[33m;[39m
    [31m[1m>[22m[39m[90m 438 |[39m       expect(resultOfZodParse[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                        [31m[1m^[22m[39m
     [90m 439 |[39m     })[33m;[39m
     [90m 440 |[39m
     [90m 441 |[39m   })[33m;[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:438:40)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: [{"voila": "ça marche"}, {"voila": "super bien!"}]

    [0m [90m 481 |[39m       )[33m;[39m
     [90m 482 |[39m       expect([32m`${(typeof reifiedZodSchema)}`[39m)[33m.[39mtoEqual([32m`${(typeof zodSchemaInstance3)}`[39m)
    [31m[1m>[22m[39m[90m 483 |[39m       expect(zodSchemaInstance3[33m.[39mparse(testTsObjectToParse3))[33m.[39mtoBe([36mtrue[39m)
     [90m     |[39m                                                              [31m[1m^[22m[39m
     [90m 484 |[39m       expect(reifiedZodSchema[33m.[39msafeParse(testTsObjectToParse3)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m 485 |[39m
     [90m 486 |[39m       [90m// const { data } = zodMatterParse(testMarkDown3, reifiedZodSchema) // zod-matter expects a zod schema of type "AnyZodObject", but this test case is not  it's a // ZodNullable etc..[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:483:62)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 508 |[39m       )[33m;[39m
     [90m 509 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 510 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 511 |[39m       )[33m;[39m
     [90m 512 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 513 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:510:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 539 |[39m       )[33m;[39m
     [90m 540 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 541 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 542 |[39m       )[33m;[39m
     [90m 543 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 544 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:541:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 570 |[39m       )[33m;[39m
     [90m 571 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 572 |[39m         [32m` >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                                         [31m[1m^[22m[39m
     [90m 573 |[39m       )[33m;[39m
     [90m 574 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 575 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:572:137)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 600 |[39m       )[33m;[39m
     [90m 601 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 602 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 603 |[39m       )[33m;[39m
     [90m 604 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 605 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:602:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 630 |[39m       )[33m;[39m
     [90m 631 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 632 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 633 |[39m       )[33m;[39m
     [90m 634 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 635 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:632:118)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        14.595 s, estimated 15 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.

> @pesto-io/pesto-zod@0.0.1-alpha test C:\Users\Utilisateur\pesto-zod
> jest --silent=false

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:365:15)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
     >>>>>>> resultOfZodParse :[{
      "success": false,
      "error": {
        "issues": [
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "hereAnother"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "tags"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
              "another"
            ],
            "message": "Required"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "exampleCategory"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example2Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example3Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "array",
            "path": [
              "example4Category"
            ],
            "message": "Expected string, received array"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "somethingElseNested"
            ],
            "message": "Expected string, received object"
          },
          {
            "code": "invalid_type",
            "expected": "string",
            "received": "object",
            "path": [
              "department"
            ],
            "message": "Expected string, received object"
          }
        ],
        "name": "ZodError"
      }
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:435:15)

  console.log
     >>>>>>> zodSchemaAsText3 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:465:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()
      .nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional().nullable()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional().nullable()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[19]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array().optional()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1027:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1032:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1007:19)

  console.log
     >>>>>>> reifiedZodSchema :[[object Object]]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:476:15)

  console.log
     >>>>>>> reifiedZodSchema's type is :[object]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:479:15)

  console.log
     >>>>>>> reifiedZodSchema.safeParse(testTsObjectToParse3) is :[{
      "success": true,
      "data": [
        {
          "voila": "ça marche"
        },
        {
          "voila": "super bien!"
        }
      ]
    }]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:482:15)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:500:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:509:15)

  console.log
     >>>>>>> zodSchemaAsText6 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:531:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:895:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:540:15)

  console.log
     >>>>>>> zodSchemaAsText7 : [z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:562:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.tuple([
          z.object({first: z.array(z.string())}),
          z.object({second: z.array(z.string())}),
          z.object({third: z.array(z.string())}),
        ]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[55]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[52]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.tuple([z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),])]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[49]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.tuple",
        "[z.object({ first: z.array(z.string()) }), z.object({ second: z.array(z.string()) }), z.object({ third: z.array(z.string()) }),]"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[tuple]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "tuple"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ first: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [first: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "first: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "first",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [first]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[first] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ second: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ second: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [second: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "second: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "second",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [second]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[second] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - elementOfTheArray = [z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:700:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ first: z.array(z.string()) })",
        "z.object({ second: z.array(z.string()) })",
        "z.object({ third: z.array(z.string()) })"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:714:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object",
        "{ first: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:719:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ third: z.array(z.string()) })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[14]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ third: z.array(z.string()) }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [third: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "third: z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "third",
        "z.array(z.string())"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [third]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[third] = this.betterExperiment(z.array(z.string()))

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.string())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[7]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyArrayLiteralExpression()] - reifiedArrayLiteralExpression is now :[{
      "reifiedArrayLiteralExpression": [
        "[object Object]",
        "[object Object]",
        "[object Object]"
      ]
    }]

      at ZodSchemaParser.reifyArrayLiteralExpression (src/parser/ZodSchemaParser.ts:725:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [tuple]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:895:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1007:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1032:19)

  console.log
     >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:571:15)

  console.log
     >>>>>>> zodSchemaAsText8 : [z.boolean().nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:592:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.boolean().nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.boolean().nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[9]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean().nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:942:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1007:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1032:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:601:15)

  console.log
     >>>>>>> zodSchemaAsText9 : [z.array(z.boolean().nullish()).nullable().optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:621:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.array(z.boolean().nullish()).nullable().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.array(z.boolean().nullish()).nullable().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish()).nullable()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish()).nullable()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array(z.boolean().nullish()).nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullable]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.array(z.boolean().nullish())",
        "nullable"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.array(z.boolean().nullish())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.array(z.boolean().nullish())]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.array",
        "z.boolean().nullish()"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean().nullish()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[6]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean().nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[nullish]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.boolean()",
        "nullish"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.boolean()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[boolean]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "boolean"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [boolean]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:942:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullish]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1012:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:900:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [nullable]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1007:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1032:19)

  console.log
     >>>>>>> experimentResult.topZodFunctionCallWithArgs.noArgsFunctionCallsStack :[undefined]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:631:15)

  console.log
     >>>>>>> zodSchemaAsText2 : [z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:651:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        voila: z.string(),
      })
      .array()
      .optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ voila: z.string(), }).array().optional()]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ voila: z.string(), }).array().optional()

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array().optional()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[16]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array().optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[optional]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), }).array()",
        "optional"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), }).array()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[13]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object({ voila: z.string(), }).array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[array]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z.object({ voila: z.string(), })",
        "array"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ voila: z.string(), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[10]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ voila: z.string(), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [voila: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "voila: z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "voila",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [voila]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[voila] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [array]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1027:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [optional]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:1032:19)

  console.log
     >>>>>>> zodSchemaAsText5 : [z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })]

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:684:14)

  console.info
    [@ZodSchemaParser].[constructor] zod schema provided to constructor: z
      .object({
        title: z.string(),
        hereAnother: z.object({
          reseau: z.object({
            cesar: z.array(z.string()),
          }),
          imLackingIdea: z.boolean().optional(),
          itsForATest: z.boolean(),
        }),
        tags: z.array(z.string()),
        another: z.boolean().nullish(),
        exampleCategory: z.array(z.array(z.string().nullable())).optional(),
        example2Category: z.nullable(z.array(z.boolean())).optional(),
        example3Category: z.optional(z.number()).array(),
        example4Category: z.array(z.number()).optional(),
        image: z.string().optional(),
        somethingElseNested: z.object({
          firstname: z.string().array(),
          lastname: z.string(),
          color: z.string(),
          two: z.boolean().optional(),
          three: z.number().array().optional(),
          four: z.array(z.number()).optional(),
        }),
        department: z.object({
          divisionName: z.string(),
          secrecyTags: z.array(z.string()).optional(),
        }),
      })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:224:15)

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [doesntMatter]

      at src/parser/ZodSchemaParser.ts:291:19

  console.log
    [@ZodSchemaParser].[initZodExpressionNode()] - WALKING DESCENDANTS OF VAR DECLARATION, current node = [z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at src/parser/ZodSchemaParser.ts:291:19

  console.info
    [@ZodSchemaParser].[constructor] After [this.initZodExpressionNode()], [this.zodExpressionNode] is : z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })

      at new ZodSchemaParser (src/parser/ZodSchemaParser.ts:261:15)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.object({ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), })]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[2]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[228]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.object",
        "{ title: z.string(), hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), }), tags: z.array(z.string()), another: z.boolean().nullish(), exampleCategory: z.array(z.array(z.string().nullable())).optional(), example2Category: z.nullable(z.array(z.boolean())).optional(), example3Category: z.optional(z.number()).array(), example4Category: z.array(z.number()).optional(), image: z.string().optional(), somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), }), department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), }), }"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[object]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:596:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "object"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:602:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:608:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [title: z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [title]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[title] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [hereAnother]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({reseau:z.object({cesar:z.array(z.string()),}),imLackingIdea:z.boolean().optional(),itsForATest:z.boolean(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[hereAnother] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [tags: z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [tags]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.string())]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[tags] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [another: z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [another]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.boolean().nullish()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[another] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [exampleCategory: z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [exampleCategory]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.array(z.string().nullable())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[exampleCategory] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example2Category: z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example2Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.nullable(z.array(z.boolean())).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example2Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example3Category: z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example3Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.optional(z.number()).array()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example3Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [example4Category: z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [example4Category]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.array(z.number()).optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[example4Category] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [image: z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [image]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.string().optional()]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[image] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [somethingElseNested]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({firstname:z.string().array(),lastname:z.string(),color:z.string(),two:z.boolean().optional(),three:z.number().array().optional(),four:z.array(z.number()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[somethingElseNested] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral = [department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:754:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "title: z.string()",
        "hereAnother: z.object({ reseau: z.object({ cesar: z.array(z.string()), }), imLackingIdea: z.boolean().optional(), itsForATest: z.boolean(), })",
        "tags: z.array(z.string())",
        "another: z.boolean().nullish()",
        "exampleCategory: z.array(z.array(z.string().nullable())).optional()",
        "example2Category: z.nullable(z.array(z.boolean())).optional()",
        "example3Category: z.optional(z.number()).array()",
        "example4Category: z.array(z.number()).optional()",
        "image: z.string().optional()",
        "somethingElseNested: z.object({ firstname: z.string().array(), lastname: z.string(), color: z.string(), two: z.boolean().optional(), three: z.number().array().optional(), four: z.array(z.number()).optional(), })",
        "department: z.object({ divisionName: z.string(), secrecyTags: z.array(z.string()).optional(), })"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:768:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "title",
        "z.string()"
      ]
    }]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:773:19)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.name = [department]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:780:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - propStructure.initializer = [z.object({divisionName:z.string(),secrecyTags:z.array(z.string()).optional(),})]

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:783:21)

  console.log
    [@ZodSchemaParser].[reifyObjectLiteralExpression()] - propertyOfTheObjLiteral - is a PropertyAssignement so it will be : reifiedJsonObjectLiteralExpression[department] = this.betterExperiment(z.string())

      at ZodSchemaParser.reifyObjectLiteralExpression (src/parser/ZodSchemaParser.ts:787:21)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node [KindName=CallExpression] is :[z.string()]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:544:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node children count is :[1]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:551:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  selected CallExpression node descendantsArray count is :[3]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:554:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenArray is :[{
      "printedChildrenArray": [
        "z.string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:573:17)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode BEFORE forEachDescendant() -  calledFunctionName is :[string]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:620:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode printedChildrenOfChildrensArray is :[{
      "printedChildrenOfChildrensArray": [
        "z",
        "string"
      ]
    }]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:626:19)

  console.log
    [@ZodSchemaParser].[betterExperiment()] - processedNode caller is :[z]

      at ZodSchemaParser.betterExperiment (src/parser/ZodSchemaParser.ts:632:19)

  console.log
    [@ZodSchemaParser].[reifyNoArgsZodFunctionCall()] - Ok zod functionName is [string], and caller is [[object Object]]

      at ZodSchemaParser.reifyNoArgsZodFunctionCall (src/parser/ZodSchemaParser.ts:937:19)

  console.log
    [@ZodSchemaParser].[reifyZodFunctionCallWithOneArg()] - Ok zod functionName is [object]

      at ZodSchemaParser.reifyZodFunctionCallWithOneArg (src/parser/ZodSchemaParser.ts:890:19)

FAIL tests/parser/ZodSchemaParser.test.ts (15.183 s)
  Testing - ZodSchemaParser parse() method
    Test the parse() method properly instantiate the zod schema
      × shall return the same extracted frontmatter  (2507 ms)
  Testing - ZodSchemaParser experiment() method
    Test the experiment() method properly find the top function call in the zod schema
      × shall return the top function call  (1350 ms)
      × shall return the top function call  (1408 ms)
      × shall return the top function call  (1392 ms)
      × shall return the top function call  (1314 ms)
      × shall return the top function call  (964 ms)
      × shall return the top function call  (1194 ms)
      √ shall return the top function call  (1151 ms)
      √ shall return the top function call  (1386 ms)

  ● Testing - ZodSchemaParser parse() method › Test the parse() method properly instantiate the zod schema › shall return the same extracted frontmatter 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 436 |[39m         [32m` >>>>>>> resultOfZodParse :[${JSON.stringify(resultOfZodParse, null, 2)}]`[39m
     [90m 437 |[39m       )[33m;[39m
    [31m[1m>[22m[39m[90m 438 |[39m       expect(resultOfZodParse[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                        [31m[1m^[22m[39m
     [90m 439 |[39m     })[33m;[39m
     [90m 440 |[39m
     [90m 441 |[39m   })[33m;[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:438:40)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: [{"voila": "ça marche"}, {"voila": "super bien!"}]

    [0m [90m 484 |[39m       )[33m;[39m
     [90m 485 |[39m       expect([32m`${(typeof reifiedZodSchema)}`[39m)[33m.[39mtoEqual([32m`${(typeof zodSchemaInstance3)}`[39m)
    [31m[1m>[22m[39m[90m 486 |[39m       expect(zodSchemaInstance3[33m.[39mparse(testTsObjectToParse3))[33m.[39mtoBe([36mtrue[39m)
     [90m     |[39m                                                              [31m[1m^[22m[39m
     [90m 487 |[39m       expect(reifiedZodSchema[33m.[39msafeParse(testTsObjectToParse3)[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m 488 |[39m
     [90m 489 |[39m       [90m// const { data } = zodMatterParse(testMarkDown3, reifiedZodSchema) // zod-matter expects a zod schema of type "AnyZodObject", but this test case is not  it's a // ZodNullable etc..[39m[0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:486:62)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 511 |[39m       )[33m;[39m
     [90m 512 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 513 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 514 |[39m       )[33m;[39m
     [90m 515 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 516 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:513:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 542 |[39m       )[33m;[39m
     [90m 543 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 544 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 545 |[39m       )[33m;[39m
     [90m 546 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 547 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:544:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 573 |[39m       )[33m;[39m
     [90m 574 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 575 |[39m         [32m` >>>>>>> [zodSchemaAsText7] experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                                         [31m[1m^[22m[39m
     [90m 576 |[39m       )[33m;[39m
     [90m 577 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 578 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:575:137)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 603 |[39m       )[33m;[39m
     [90m 604 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 605 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 606 |[39m       )[33m;[39m
     [90m 607 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 608 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:605:118)

  ● Testing - ZodSchemaParser experiment() method › Test the experiment() method properly find the top function call in the zod schema › shall return the top function call 

    TypeError: Cannot read properties of undefined (reading 'length')

    [0m [90m 633 |[39m       )[33m;[39m
     [90m 634 |[39m       console[33m.[39mlog(
    [31m[1m>[22m[39m[90m 635 |[39m         [32m` >>>>>>> experimentResult.topZodFunctionCallWithArgs.length :[${experimentResult.topZodFunctionCallWithArgs.length}]`[39m
     [90m     |[39m                                                                                                                      [31m[1m^[22m[39m
     [90m 636 |[39m       )[33m;[39m
     [90m 637 |[39m       experimentResult[33m.[39mtopZodFunctionCallWithArgs[33m.[39mforEach((node[33m:[39m [33mNode[39m[33m<[39m[33mts[39m[33m.[39m[33mNode[39m[33m>[39m) [33m=>[39m {
     [90m 638 |[39m         console[33m.[39mlog([0m

      at Object.<anonymous> (tests/parser/ZodSchemaParser.test.ts:635:118)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 2 passed, 9 total
Snapshots:   0 total
Time:        15.324 s
Ran all test suites.
 ELIFECYCLE  Test failed. See above for more details.
