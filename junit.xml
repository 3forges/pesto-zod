<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="30" failures="0" errors="0" time="42.853">
  <testsuite name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method" errors="0" failures="0" skipped="0" timestamp="2024-09-23T20:16:32" time="42.743" tests="30">
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #1: zodSchema1&quot;, &quot;testTsObjectToValidate&quot;: undefined, &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    voila: z.string(),
  })
  .optional()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #1: zodSchema1&quot;, &quot;testTsObjectToValidate&quot;: undefined, &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    voila: z.string(),
  })
  .optional()&quot;}] successfully pass the zod parse test" time="2.128">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: false, &quot;name&quot;: &quot;Test #1bis: zodSchema1&quot;, &quot;testTsObjectToValidate&quot;: null, &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    voila: z.string(),
  })
  .optional()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: false, &quot;name&quot;: &quot;Test #1bis: zodSchema1&quot;, &quot;testTsObjectToValidate&quot;: null, &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    voila: z.string(),
  })
  .optional()&quot;}] successfully pass the zod parse test" time="1.381">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #2: zodSchema2&quot;, &quot;testTsObjectToValidate&quot;: [Array], &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    voila: z.string(),
  })
  .array()
  .optional()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #2: zodSchema2&quot;, &quot;testTsObjectToValidate&quot;: [Array], &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    voila: z.string(),
  })
  .array()
  .optional()&quot;}] successfully pass the zod parse test" time="1.224">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #3: zodSchema3&quot;, &quot;testTsObjectToValidate&quot;: [Array], &quot;zodSchema&quot;: [ZodNullable], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    voila: z.string(),
  })
  .array()
  .optional()
  .nullable()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #3: zodSchema3&quot;, &quot;testTsObjectToValidate&quot;: [Array], &quot;zodSchema&quot;: [ZodNullable], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    voila: z.string(),
  })
  .array()
  .optional()
  .nullable()&quot;}] successfully pass the zod parse test" time="1.169">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #4: zodSchema4&quot;, &quot;testTsObjectToValidate&quot;: [Object], &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })
  .optional()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #4: zodSchema4&quot;, &quot;testTsObjectToValidate&quot;: [Object], &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })
  .optional()&quot;}] successfully pass the zod parse test" time="2.033">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #5: zodSchema5&quot;, &quot;testTsObjectToValidate&quot;: [Object], &quot;zodSchema&quot;: [ZodObject], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #5: zodSchema5&quot;, &quot;testTsObjectToValidate&quot;: [Object], &quot;zodSchema&quot;: [ZodObject], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })&quot;}] successfully pass the zod parse test" time="1.938">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #6: zodSchema6&quot;, &quot;testTsObjectToValidate&quot;: [Array], &quot;zodSchema&quot;: [ZodTuple], &quot;zodSchemaAsText&quot;: &quot;z.tuple([
      z.object({first: z.array(z.string())}),
      z.object({second: z.array(z.string())}),
      z.object({third: z.array(z.string())}),
    ])&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #6: zodSchema6&quot;, &quot;testTsObjectToValidate&quot;: [Array], &quot;zodSchema&quot;: [ZodTuple], &quot;zodSchemaAsText&quot;: &quot;z.tuple([
      z.object({first: z.array(z.string())}),
      z.object({second: z.array(z.string())}),
      z.object({third: z.array(z.string())}),
    ])&quot;}] successfully pass the zod parse test" time="1.265">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #7: zodSchema7&quot;, &quot;testTsObjectToValidate&quot;: [Array], &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z.tuple([
      z.object({first: z.array(z.string())}),
      z.object({second: z.array(z.string())}),
      z.object({third: z.array(z.string())}),
    ]).nullable().optional()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #7: zodSchema7&quot;, &quot;testTsObjectToValidate&quot;: [Array], &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z.tuple([
      z.object({first: z.array(z.string())}),
      z.object({second: z.array(z.string())}),
      z.object({third: z.array(z.string())}),
    ]).nullable().optional()&quot;}] successfully pass the zod parse test" time="1.346">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #8: zodSchema8&quot;, &quot;testTsObjectToValidate&quot;: false, &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z.boolean().nullable().optional()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #8: zodSchema8&quot;, &quot;testTsObjectToValidate&quot;: false, &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z.boolean().nullable().optional()&quot;}] successfully pass the zod parse test" time="1.028">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #9: zodSchema9&quot;, &quot;testTsObjectToValidate&quot;: [Array], &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z.array(z.boolean().nullish()).nullable().optional()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #9: zodSchema9&quot;, &quot;testTsObjectToValidate&quot;: [Array], &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z.array(z.boolean().nullish()).nullable().optional()&quot;}] successfully pass the zod parse test" time="1.122">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #10: zodSchema10&quot;, &quot;testTsObjectToValidate&quot;: [Object], &quot;zodSchema&quot;: [ZodNullable], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    un: z.object({
      deux: z.object({
        trois: z.object({
          quatre: z.object({
            cinq: z.object({
              six: z.object({
                sept: z.string(),
              }),
            }),
          }),
        }),
      }),
    })
  })
  .strict().optional().nullable()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #10: zodSchema10&quot;, &quot;testTsObjectToValidate&quot;: [Object], &quot;zodSchema&quot;: [ZodNullable], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    un: z.object({
      deux: z.object({
        trois: z.object({
          quatre: z.object({
            cinq: z.object({
              six: z.object({
                sept: z.string(),
              }),
            }),
          }),
        }),
      }),
    })
  })
  .strict().optional().nullable()&quot;}] successfully pass the zod parse test" time="1.343">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #10bis: zodSchema10&quot;, &quot;testTsObjectToValidate&quot;: null, &quot;zodSchema&quot;: [ZodNullable], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    un: z.object({
      deux: z.object({
        trois: z.object({
          quatre: z.object({
            cinq: z.object({
              six: z.object({
                sept: z.string(),
              }),
            }),
          }),
        }),
      }),
    })
  })
  .strict().optional().nullable()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #10bis: zodSchema10&quot;, &quot;testTsObjectToValidate&quot;: null, &quot;zodSchema&quot;: [ZodNullable], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    un: z.object({
      deux: z.object({
        trois: z.object({
          quatre: z.object({
            cinq: z.object({
              six: z.object({
                sept: z.string(),
              }),
            }),
          }),
        }),
      }),
    })
  })
  .strict().optional().nullable()&quot;}] successfully pass the zod parse test" time="1.363">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #10ter: zodSchema10&quot;, &quot;testTsObjectToValidate&quot;: undefined, &quot;zodSchema&quot;: [ZodNullable], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    un: z.object({
      deux: z.object({
        trois: z.object({
          quatre: z.object({
            cinq: z.object({
              six: z.object({
                sept: z.string(),
              }),
            }),
          }),
        }),
      }),
    })
  })
  .strict().optional().nullable()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #10ter: zodSchema10&quot;, &quot;testTsObjectToValidate&quot;: undefined, &quot;zodSchema&quot;: [ZodNullable], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    un: z.object({
      deux: z.object({
        trois: z.object({
          quatre: z.object({
            cinq: z.object({
              six: z.object({
                sept: z.string(),
              }),
            }),
          }),
        }),
      }),
    })
  })
  .strict().optional().nullable()&quot;}] successfully pass the zod parse test" time="1.357">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #11: zodSchema11, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #11: zodSchema11, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime()&quot;}] successfully pass the zod parse test" time="1.091">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #11bis: zodSchema11, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #11bis: zodSchema11, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime()&quot;}] successfully pass the zod parse test" time="0.932">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #11ter: zodSchema11, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123456Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #11ter: zodSchema11, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123456Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime()&quot;}] successfully pass the zod parse test" time="0.952">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: false, &quot;name&quot;: &quot;Test #11quarte: zodSchema11, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00+02:00&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime()&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: false, &quot;name&quot;: &quot;Test #11quarte: zodSchema11, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00+02:00&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime()&quot;}] successfully pass the zod parse test" time="0.95">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #12: zodSchema12, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00+02:00&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ offset: true });&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #12: zodSchema12, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00+02:00&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ offset: true });&quot;}] successfully pass the zod parse test" time="0.98">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #12bis: zodSchema12, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123+02:00&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ offset: true });&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #12bis: zodSchema12, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123+02:00&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ offset: true });&quot;}] successfully pass the zod parse test" time="0.972">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #12ter: zodSchema12, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123+0200&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ offset: true });&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #12ter: zodSchema12, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123+0200&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ offset: true });&quot;}] successfully pass the zod parse test" time="0.993">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #12quarte: zodSchema12, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123+02&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ offset: true });&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #12quarte: zodSchema12, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123+02&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ offset: true });&quot;}] successfully pass the zod parse test" time="1.029">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #13: zodSchema13, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ precision: 3 });&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #13: zodSchema13, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ precision: 3 });&quot;}] successfully pass the zod parse test" time="1.046">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: false, &quot;name&quot;: &quot;Test #13bis: zodSchema13, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ precision: 3 });&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: false, &quot;name&quot;: &quot;Test #13bis: zodSchema13, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ precision: 3 });&quot;}] successfully pass the zod parse test" time="1.019">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: false, &quot;name&quot;: &quot;Test #13ter: zodSchema13, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123456Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ precision: 3 });&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: false, &quot;name&quot;: &quot;Test #13ter: zodSchema13, https://zod.dev/?id=datetimes&quot;, &quot;testTsObjectToValidate&quot;: &quot;2020-01-01T00:00:00.123456Z&quot;, &quot;zodSchema&quot;: [ZodString], &quot;zodSchemaAsText&quot;: &quot;z.string().datetime({ precision: 3 });&quot;}] successfully pass the zod parse test" time="1.013">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #14: zodSchema14, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the \&quot;not\&quot; operator).&quot;, &quot;testTsObjectToValidate&quot;: [Object], &quot;zodSchema&quot;: [ZodObject], &quot;zodSchemaAsText&quot;: &quot;z.object({ 
    something: z.boolean(),
  });&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #14: zodSchema14, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using an unary operator (the \&quot;not\&quot; operator).&quot;, &quot;testTsObjectToValidate&quot;: [Object], &quot;zodSchema&quot;: [ZodObject], &quot;zodSchemaAsText&quot;: &quot;z.object({ 
    something: z.boolean(),
  });&quot;}] successfully pass the zod parse test" time="1.407">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #14bis: testCase14bis, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using both an unary, and a binary operator (the \&quot;not\&quot; operator, and the \&quot;or\&quot; operator).&quot;, &quot;testTsObjectToValidate&quot;: [Object], &quot;zodSchema&quot;: [ZodObject], &quot;zodSchemaAsText&quot;: &quot;z.object({ 
    something: z.boolean(),
  });&quot;}] successfully pass the zod parse test" name="Tests of the {@ZodSchemaReifier} reify() method against the zod parse method Test the reify() returns a zod schema which successfully parses the test TypeScript Object [{&quot;expect&quot;: true, &quot;name&quot;: &quot;Test #14bis: testCase14bis, a simple zod object  with one boolean property, the test assigns a boolean value to the property, using both an unary, and a binary operator (the \&quot;not\&quot; operator, and the \&quot;or\&quot; operator).&quot;, &quot;testTsObjectToValidate&quot;: [Object], &quot;zodSchema&quot;: [ZodObject], &quot;zodSchemaAsText&quot;: &quot;z.object({ 
    something: z.boolean(),
  });&quot;}] successfully pass the zod parse test" time="1.305">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown [{&quot;expectedFrontmatter&quot;: [Array], &quot;name&quot;: &quot;Test #3: markdown frontmatter extraction zodSchema3&quot;, &quot;testMarkdown&quot;: &quot;---

- voila: oh que oui
- voila: ça marche vraiment!
---

# Hello Pesto ZodSchemaReifier!
&quot;, &quot;zodMatterShouldThrow&quot;: false, &quot;zodSchema&quot;: [ZodNullable], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    voila: z.string(),
  })
  .array()
  .optional()
  .nullable()&quot;}] successfully pass the zod parse test [%p]" name="Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown [{&quot;expectedFrontmatter&quot;: [Array], &quot;name&quot;: &quot;Test #3: markdown frontmatter extraction zodSchema3&quot;, &quot;testMarkdown&quot;: &quot;---

- voila: oh que oui
- voila: ça marche vraiment!
---

# Hello Pesto ZodSchemaReifier!
&quot;, &quot;zodMatterShouldThrow&quot;: false, &quot;zodSchema&quot;: [ZodNullable], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    voila: z.string(),
  })
  .array()
  .optional()
  .nullable()&quot;}] successfully pass the zod parse test [%p]" time="1.261">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown [{&quot;expectedFrontmatter&quot;: [Object], &quot;name&quot;: &quot;Test #4: markdown frontmatter extraction zodSchema4&quot;, &quot;testMarkdown&quot;: &quot;---

title: HiDeoo

hereAnother: 

  reseau: 

    cesar: 

      - marc

      - aurèle

      - auguste

  imLackingIdea: true

  itsForATest: false

tags: 

  - william

  - the

  - conquerer

another: true

exampleCategory:

  - - joe

    - alfred

    - alvin

  - - thirteen

    - hundred

    - books

  - - going

    - overseas

    - together

example2Category: 

  - false

  - true

  - false

example3Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

example4Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

image: \&quot;./images/paysages/puydedome.png\&quot;

somethingElseNested:

  firstname: 

    - Jean-Baptiste

    - Marie

    - Éric

  lastname: Lasselle

  color: yellow

  two: false

  three: 

    - 56

    - 789

    - 159

  four: 

    - 15

    - 46

    - 739

  example1Categories: 

    - design

    - terraform

    - plugin

  example2Categories: 

    first:

      - joe

      - alfred

      - alvin

    second:

      - thirteen

      - hundred

      - books

    third:

      - going

      - overseas

      - together

department: 

  divisionName: CCOE

  secrecyTags: 
    - LEVEL3
 
    - NOCOPY

---

# Hello Pesto ZodSchemaReifier!
&quot;, &quot;zodMatterShouldThrow&quot;: false, &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })
  .optional()&quot;}] successfully pass the zod parse test [%p]" name="Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown [{&quot;expectedFrontmatter&quot;: [Object], &quot;name&quot;: &quot;Test #4: markdown frontmatter extraction zodSchema4&quot;, &quot;testMarkdown&quot;: &quot;---

title: HiDeoo

hereAnother: 

  reseau: 

    cesar: 

      - marc

      - aurèle

      - auguste

  imLackingIdea: true

  itsForATest: false

tags: 

  - william

  - the

  - conquerer

another: true

exampleCategory:

  - - joe

    - alfred

    - alvin

  - - thirteen

    - hundred

    - books

  - - going

    - overseas

    - together

example2Category: 

  - false

  - true

  - false

example3Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

example4Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

image: \&quot;./images/paysages/puydedome.png\&quot;

somethingElseNested:

  firstname: 

    - Jean-Baptiste

    - Marie

    - Éric

  lastname: Lasselle

  color: yellow

  two: false

  three: 

    - 56

    - 789

    - 159

  four: 

    - 15

    - 46

    - 739

  example1Categories: 

    - design

    - terraform

    - plugin

  example2Categories: 

    first:

      - joe

      - alfred

      - alvin

    second:

      - thirteen

      - hundred

      - books

    third:

      - going

      - overseas

      - together

department: 

  divisionName: CCOE

  secrecyTags: 
    - LEVEL3
 
    - NOCOPY

---

# Hello Pesto ZodSchemaReifier!
&quot;, &quot;zodMatterShouldThrow&quot;: false, &quot;zodSchema&quot;: [ZodOptional], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })
  .optional()&quot;}] successfully pass the zod parse test [%p]" time="2.234">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown [{&quot;expectedFrontmatter&quot;: [Object], &quot;name&quot;: &quot;Test #5: markdown frontmatter extraction zodSchema5&quot;, &quot;testMarkdown&quot;: &quot;---

title: HiDeoo

hereAnother:

  reseau:

    cesar:

      - marc

      - aurèle

      - auguste

  imLackingIdea: true

  itsForATest: false

tags: 

  - william

  - the

  - conquerer

another: true

exampleCategory:

  - - joe

    - alfred

    - alvin

  - - thirteen

    - hundred

    - books

  - - going

    - overseas

    - together

example2Category: 

  - false

  - true

  - false

example3Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

example4Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

image: \&quot;./images/paysages/puydedome.png\&quot;

somethingElseNested:

  firstname: 

    - Jean-Baptiste

    - Marie

    - Éric

  lastname: Lasselle

  color: yellow

  two: false

  three: 

    - 56

    - 789

    - 159

  four: 

    - 15

    - 46

    - 739

  example1Categories: 

    - design

    - terraform

    - plugin

  example2Categories: 

    first:

      - joe

      - alfred

      - alvin

    second:

      - thirteen

      - hundred

      - books

    third:

      - going

      - overseas

      - together

department: 

  divisionName: CCOE

  secrecyTags: 
    - LEVEL3
 
    - NOCOPY

---

# Hello Pesto ZodSchemaReifier!
&quot;, &quot;zodMatterShouldThrow&quot;: false, &quot;zodSchema&quot;: [ZodObject], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })&quot;}] successfully pass the zod parse test [%p]" name="Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown [{&quot;expectedFrontmatter&quot;: [Object], &quot;name&quot;: &quot;Test #5: markdown frontmatter extraction zodSchema5&quot;, &quot;testMarkdown&quot;: &quot;---

title: HiDeoo

hereAnother:

  reseau:

    cesar:

      - marc

      - aurèle

      - auguste

  imLackingIdea: true

  itsForATest: false

tags: 

  - william

  - the

  - conquerer

another: true

exampleCategory:

  - - joe

    - alfred

    - alvin

  - - thirteen

    - hundred

    - books

  - - going

    - overseas

    - together

example2Category: 

  - false

  - true

  - false

example3Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

example4Category: 

  - 7684464125145

  - 26454943684684

  - 1516546884648

image: \&quot;./images/paysages/puydedome.png\&quot;

somethingElseNested:

  firstname: 

    - Jean-Baptiste

    - Marie

    - Éric

  lastname: Lasselle

  color: yellow

  two: false

  three: 

    - 56

    - 789

    - 159

  four: 

    - 15

    - 46

    - 739

  example1Categories: 

    - design

    - terraform

    - plugin

  example2Categories: 

    first:

      - joe

      - alfred

      - alvin

    second:

      - thirteen

      - hundred

      - books

    third:

      - going

      - overseas

      - together

department: 

  divisionName: CCOE

  secrecyTags: 
    - LEVEL3
 
    - NOCOPY

---

# Hello Pesto ZodSchemaReifier!
&quot;, &quot;zodMatterShouldThrow&quot;: false, &quot;zodSchema&quot;: [ZodObject], &quot;zodSchemaAsText&quot;: &quot;z
  .object({
    title: z.string(),
    hereAnother: z.object({
      reseau: z.object({
        cesar: z.array(z.string()),
      }),
      imLackingIdea: z.boolean().optional(),
      itsForATest: z.boolean(),
    }),
    tags: z.array(z.string()),
    another: z.boolean().nullish(),
    exampleCategory: z.array(z.array(z.string().nullable())).optional(),
    example2Category: z.nullable(z.array(z.boolean())).optional(),
    example3Category: z.optional(z.number()).array(),
    example4Category: z.array(z.number()).optional(),
    image: z.string().optional(),
    somethingElseNested: z.object({
      firstname: z.string().array(),
      lastname: z.string(),
      color: z.string(),
      two: z.boolean().optional(),
      three: z.number().array().optional(),
      four: z.array(z.number()).optional(),
    }),
    department: z.object({
      divisionName: z.string(),
      secrecyTags: z.array(z.string()).optional(),
    }),
  })&quot;}] successfully pass the zod parse test [%p]" time="2.053">
    </testcase>
    <testcase classname="Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown [{&quot;expectedFrontmatter&quot;: [Array], &quot;name&quot;: &quot;Test #6: markdown frontmatter extraction zodSchema6&quot;, &quot;testMarkdown&quot;: undefined, &quot;zodMatterShouldThrow&quot;: true, &quot;zodSchema&quot;: [ZodTuple], &quot;zodSchemaAsText&quot;: &quot;z.tuple([
      z.object({first: z.array(z.string())}),
      z.object({second: z.array(z.string())}),
      z.object({third: z.array(z.string())}),
    ])&quot;}] should throw an error because zod matter parse does not accept zod tuples as input schema" name="Tests of the {@ZodSchemaReifier} reify() method against the zod-matter parse method Test the reify() returns a zod schema which successfully extracts the frontmatter from the test markdown [{&quot;expectedFrontmatter&quot;: [Array], &quot;name&quot;: &quot;Test #6: markdown frontmatter extraction zodSchema6&quot;, &quot;testMarkdown&quot;: undefined, &quot;zodMatterShouldThrow&quot;: true, &quot;zodSchema&quot;: [ZodTuple], &quot;zodSchemaAsText&quot;: &quot;z.tuple([
      z.object({first: z.array(z.string())}),
      z.object({second: z.array(z.string())}),
      z.object({third: z.array(z.string())}),
    ])&quot;}] should throw an error because zod matter parse does not accept zod tuples as input schema" time="1.257">
    </testcase>
  </testsuite>
</testsuites>